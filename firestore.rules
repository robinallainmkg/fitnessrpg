rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Vérifier si l'utilisateur est admin via son document
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Challenge submissions
    match /submissions/{submissionId} {
      // Les utilisateurs peuvent créer leurs propres soumissions
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.status == 'pending';
      
      // Les utilisateurs peuvent lire leurs propres soumissions
      // Les admins peuvent lire toutes les soumissions
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      
      // Seuls les admins peuvent modifier le statut des soumissions
      allow update: if isAdmin();
      
      // Seuls les admins peuvent supprimer des soumissions
      allow delete: if isAdmin();
    }
    
    // Daily challenges
    match /dailyChallenges/{date}/users/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Categories (programme data)
    match /categories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Program details
    match /programDetails/{programId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // User progress
    match /userProgress/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Workout sessions (pour l'historique)
    match /workoutSessions/{sessionId} {
      // Les utilisateurs peuvent lire leurs propres sessions
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Les utilisateurs peuvent créer leurs propres sessions (workouts)
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Les admins peuvent créer des sessions pour les challenges validés
      allow create: if isAdmin() && request.resource.data.type == 'challenge';
      
      // Les utilisateurs peuvent modifier/supprimer leurs propres sessions
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
}
