{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"style\", \"hideTransitionAnimation\", \"translucent\", \"backgroundColor\"];\nvar _jsxFileName = \"C:\\\\Users\\\\robin\\\\Documents\\\\RpgHybrid\\\\node_modules\\\\expo-status-bar\\\\src\\\\NativeStatusBarWrapper.tsx\";\nimport React from 'react';\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport NativeStatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function StatusBar(_ref) {\n  let {\n      style,\n      hideTransitionAnimation,\n      translucent = true,\n      backgroundColor: backgroundColorProp\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const colorScheme = useColorScheme();\n  const barStyle = React.useMemo(() => styleToBarStyle(style, colorScheme), [style, colorScheme]);\n  let backgroundColor = backgroundColorProp;\n  if (translucent && !backgroundColor) {\n    backgroundColor = 'transparent';\n  }\n  return _jsxDEV(NativeStatusBar, Object.assign({}, props, {\n    translucent: translucent,\n    barStyle: barStyle,\n    backgroundColor: backgroundColor,\n    showHideTransition: hideTransitionAnimation === 'none' ? undefined : hideTransitionAnimation\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\nexport function setStatusBarStyle(style, animated) {\n  NativeStatusBar.setBarStyle(styleToBarStyle(style), animated);\n}\nexport function setStatusBarHidden(hidden, animation) {\n  NativeStatusBar.setHidden(hidden, animation);\n}\nexport function setStatusBarBackgroundColor(backgroundColor, animated) {\n  NativeStatusBar.setBackgroundColor(backgroundColor, animated);\n}\nexport function setStatusBarNetworkActivityIndicatorVisible(visible) {\n  NativeStatusBar.setNetworkActivityIndicatorVisible(visible);\n}\nexport function setStatusBarTranslucent(translucent) {\n  NativeStatusBar.setTranslucent(translucent);\n}\nfunction styleToBarStyle(style = 'auto', colorScheme = Appearance?.getColorScheme() ?? 'light') {\n  if (!colorScheme) {\n    colorScheme = 'light';\n  }\n  let resolvedStyle = style;\n  if (style === 'auto') {\n    resolvedStyle = colorScheme === 'light' ? 'dark' : 'light';\n  } else if (style === 'inverted') {\n    resolvedStyle = colorScheme === 'light' ? 'light' : 'dark';\n  }\n  return resolvedStyle === 'light' ? 'light-content' : 'dark-content';\n}","map":{"version":3,"names":["React","Appearance","NativeStatusBar","useColorScheme","jsxDEV","_jsxDEV","StatusBar","_ref","style","hideTransitionAnimation","translucent","backgroundColor","backgroundColorProp","props","_objectWithoutPropertiesLoose","_excluded","colorScheme","barStyle","useMemo","styleToBarStyle","Object","assign","showHideTransition","undefined","fileName","_jsxFileName","lineNumber","columnNumber","setStatusBarStyle","animated","setBarStyle","setStatusBarHidden","hidden","animation","setHidden","setStatusBarBackgroundColor","setBackgroundColor","setStatusBarNetworkActivityIndicatorVisible","visible","setNetworkActivityIndicatorVisible","setStatusBarTranslucent","setTranslucent","getColorScheme","resolvedStyle"],"sources":["C:/Users/robin/Documents/RpgHybrid/node_modules/expo-status-bar/src/NativeStatusBarWrapper.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Appearance,\n  StatusBar as NativeStatusBar,\n  useColorScheme,\n  type ColorSchemeName,\n  type ColorValue,\n} from 'react-native';\n\nimport { StatusBarProps, StatusBarStyle, StatusBarAnimation } from './types';\n\n/**\n * A component that allows you to configure your status bar without directly calling imperative\n * methods like `setBarStyle`.\n *\n * You will likely have multiple `StatusBar` components mounted in the same app at the same time.\n * For example, if you have multiple screens in your app, you may end up using one per screen.\n * The props of each `StatusBar` component will be merged in the order that they were mounted.\n * This component is built on top of the [StatusBar](https://reactnative.dev/docs/statusbar)\n * component exported from React Native, and it provides defaults that work better for Expo users.\n */\nexport function StatusBar({\n  style,\n  hideTransitionAnimation,\n  translucent = true,\n  backgroundColor: backgroundColorProp,\n  ...props\n}: StatusBarProps) {\n  // Pick appropriate default value depending on current theme, so if we are\n  // locked to light mode we don't end up with a light status bar\n  const colorScheme = useColorScheme();\n  const barStyle = React.useMemo(() => styleToBarStyle(style, colorScheme), [style, colorScheme]);\n\n  // If translucent and no backgroundColor is provided, then use transparent\n  // background\n  let backgroundColor = backgroundColorProp;\n  if (translucent && !backgroundColor) {\n    backgroundColor = 'transparent';\n  }\n\n  return (\n    <NativeStatusBar\n      {...props}\n      translucent={translucent}\n      barStyle={barStyle}\n      backgroundColor={backgroundColor}\n      showHideTransition={hideTransitionAnimation === 'none' ? undefined : hideTransitionAnimation}\n    />\n  );\n}\n\n// @needsAudit\n/**\n * Set the bar style of the status bar.\n * @param style The color of the status bar text.\n * @param animated If the transition should be animated.\n */\nexport function setStatusBarStyle(style: StatusBarStyle, animated?: boolean) {\n  NativeStatusBar.setBarStyle(styleToBarStyle(style), animated);\n}\n\n// @needsAudit\n/**\n * Toggle visibility of the status bar.\n * @param hidden If the status bar should be hidden.\n * @param animation Animation to use when toggling hidden, defaults to `'none'`.\n */\nexport function setStatusBarHidden(hidden: boolean, animation?: StatusBarAnimation) {\n  NativeStatusBar.setHidden(hidden, animation);\n}\n\n// @needsAudit\n/**\n * Set the background color of the status bar.\n * @param backgroundColor The background color of the status bar.\n * @param animated `true` to animate the background color change, `false` to change immediately.\n * @platform android\n */\nexport function setStatusBarBackgroundColor(backgroundColor: ColorValue, animated?: boolean) {\n  NativeStatusBar.setBackgroundColor(backgroundColor, animated);\n}\n\n// @needsAudit\n/**\n * Toggle visibility of the network activity indicator.\n * @param visible If the network activity indicator should be visible.\n * @platform ios\n */\nexport function setStatusBarNetworkActivityIndicatorVisible(visible: boolean) {\n  NativeStatusBar.setNetworkActivityIndicatorVisible(visible);\n}\n\n// @needsAudit\n/**\n * Set the translucency of the status bar.\n * @param translucent Whether the app can draw under the status bar. When `true`, content will be\n * rendered under the status bar. This is always `true` on iOS and cannot be changed.\n * @platform android\n */\nexport function setStatusBarTranslucent(translucent: boolean) {\n  NativeStatusBar.setTranslucent(translucent);\n}\n\nfunction styleToBarStyle(\n  style: StatusBarStyle = 'auto',\n  colorScheme: ColorSchemeName = Appearance?.getColorScheme() ?? 'light'\n): 'light-content' | 'dark-content' {\n  if (!colorScheme) {\n    colorScheme = 'light';\n  }\n\n  let resolvedStyle = style;\n  if (style === 'auto') {\n    resolvedStyle = colorScheme === 'light' ? 'dark' : 'light';\n  } else if (style === 'inverted') {\n    resolvedStyle = colorScheme === 'light' ? 'light' : 'dark';\n  }\n\n  return resolvedStyle === 'light' ? 'light-content' : 'dark-content';\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,eAAA;AAAA,OAAAC,cAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAqB1B,OAAO,SAASC,SAASA,CAAAC,IAAA,EAMN;EAAA,IANO;MACxBC,KAAK;MACLC,uBAAuB;MACvBC,WAAW,GAAG,IAAI;MAClBC,eAAe,EAAEC;IAEH,CAAC,GAAAL,IAAA;IADZM,KAAK,GAAAC,6BAAA,CAAAP,IAAA,EAAAQ,SAAA;EAIR,MAAMC,WAAW,GAAGb,cAAc,CAAC,CAAC;EACpC,MAAMc,QAAQ,GAAGjB,KAAK,CAACkB,OAAO,CAAC,MAAMC,eAAe,CAACX,KAAK,EAAEQ,WAAW,CAAC,EAAE,CAACR,KAAK,EAAEQ,WAAW,CAAC,CAAC;EAI/F,IAAIL,eAAe,GAAGC,mBAAmB;EACzC,IAAIF,WAAW,IAAI,CAACC,eAAe,EAAE;IACnCA,eAAe,GAAG,aAAa;EACjC;EAEA,OACEN,OAAA,CAACH,eAAe,EAAAkB,MAAA,CAAAC,MAAA,KACVR,KAAK;IACTH,WAAW,EAAEA,WAAY;IACzBO,QAAQ,EAAEA,QAAS;IACnBN,eAAe,EAAEA,eAAgB;IACjCW,kBAAkB,EAAEb,uBAAuB,KAAK,MAAM,GAAGc,SAAS,GAAGd;EAAwB;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9F,CAAC;AAEN;AAQA,OAAO,SAASC,iBAAiBA,CAACpB,KAAqB,EAAEqB,QAAkB,EAAE;EAC3E3B,eAAe,CAAC4B,WAAW,CAACX,eAAe,CAACX,KAAK,CAAC,EAAEqB,QAAQ,CAAC;AAC/D;AAQA,OAAO,SAASE,kBAAkBA,CAACC,MAAe,EAAEC,SAA8B,EAAE;EAClF/B,eAAe,CAACgC,SAAS,CAACF,MAAM,EAAEC,SAAS,CAAC;AAC9C;AASA,OAAO,SAASE,2BAA2BA,CAACxB,eAA2B,EAAEkB,QAAkB,EAAE;EAC3F3B,eAAe,CAACkC,kBAAkB,CAACzB,eAAe,EAAEkB,QAAQ,CAAC;AAC/D;AAQA,OAAO,SAASQ,2CAA2CA,CAACC,OAAgB,EAAE;EAC5EpC,eAAe,CAACqC,kCAAkC,CAACD,OAAO,CAAC;AAC7D;AASA,OAAO,SAASE,uBAAuBA,CAAC9B,WAAoB,EAAE;EAC5DR,eAAe,CAACuC,cAAc,CAAC/B,WAAW,CAAC;AAC7C;AAEA,SAASS,eAAeA,CACtBX,KAAqB,GAAG,MAAM,EAC9BQ,WAA4B,GAAGf,UAAU,EAAEyC,cAAc,CAAC,CAAC,IAAI,OAAO,EACpC;EAClC,IAAI,CAAC1B,WAAW,EAAE;IAChBA,WAAW,GAAG,OAAO;EACvB;EAEA,IAAI2B,aAAa,GAAGnC,KAAK;EACzB,IAAIA,KAAK,KAAK,MAAM,EAAE;IACpBmC,aAAa,GAAG3B,WAAW,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;EAC5D,CAAC,MAAM,IAAIR,KAAK,KAAK,UAAU,EAAE;IAC/BmC,aAAa,GAAG3B,WAAW,KAAK,OAAO,GAAG,OAAO,GAAG,MAAM;EAC5D;EAEA,OAAO2B,aAAa,KAAK,OAAO,GAAG,eAAe,GAAG,cAAc;AACrE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}