{"ast":null,"code":"export const calculateWorkoutScore = exercisesCompleted => {\n  if (!exercisesCompleted || exercisesCompleted.length === 0) {\n    return {\n      score: 0,\n      percentage: 0\n    };\n  }\n  let totalTarget = 0;\n  let totalActual = 0;\n  exercisesCompleted.forEach(exercise => {\n    if (exercise.type === 'reps') {\n      totalTarget += exercise.target;\n      totalActual += Math.min(exercise.actual, exercise.target);\n    } else if (exercise.type === 'time') {\n      totalTarget += exercise.target;\n      totalActual += Math.min(exercise.actual, exercise.target);\n    }\n  });\n  const percentage = totalTarget > 0 ? totalActual / totalTarget * 100 : 0;\n  const score = Math.round(percentage / 100 * 1000);\n  return {\n    score: Math.max(0, Math.min(1000, score)),\n    percentage: Math.round(percentage)\n  };\n};\nexport const isLevelCompleted = score => {\n  return score >= 800;\n};\nexport const calculateXPBonus = (score, baseXP) => {\n  let bonus = 0;\n  if (score >= 950) {\n    bonus = 0.5;\n  } else if (score >= 900) {\n    bonus = 0.25;\n  }\n  return Math.round(baseXP * (1 + bonus));\n};","map":{"version":3,"names":["calculateWorkoutScore","exercisesCompleted","length","score","percentage","totalTarget","totalActual","forEach","exercise","type","target","Math","min","actual","round","max","isLevelCompleted","calculateXPBonus","baseXP","bonus"],"sources":["C:/Users/robin/Documents/RpgHybrid/src/utils/scoring.js"],"sourcesContent":["/**\r\n * Calcule le score d'une séance d'entraînement\r\n * @param {Array} exercisesCompleted - Array d'objets {target, actual, type}\r\n * @returns {Object} - {score: number, percentage: number}\r\n */\r\nexport const calculateWorkoutScore = (exercisesCompleted) => {\r\n  if (!exercisesCompleted || exercisesCompleted.length === 0) {\r\n    return { score: 0, percentage: 0 };\r\n  }\r\n\r\n  let totalTarget = 0;\r\n  let totalActual = 0;\r\n\r\n  exercisesCompleted.forEach(exercise => {\r\n    if (exercise.type === 'reps') {\r\n      totalTarget += exercise.target;\r\n      totalActual += Math.min(exercise.actual, exercise.target); // Limite à l'objectif\r\n    } else if (exercise.type === 'time') {\r\n      // Pour le temps, on considère que atteindre l'objectif = 100%\r\n      totalTarget += exercise.target;\r\n      totalActual += Math.min(exercise.actual, exercise.target);\r\n    }\r\n  });\r\n\r\n  const percentage = totalTarget > 0 ? (totalActual / totalTarget) * 100 : 0;\r\n  const score = Math.round((percentage / 100) * 1000); // Score sur 1000\r\n\r\n  return {\r\n    score: Math.max(0, Math.min(1000, score)), // Entre 0 et 1000\r\n    percentage: Math.round(percentage)\r\n  };\r\n};\r\n\r\n/**\r\n * Détermine si un niveau est complété\r\n * @param {number} score - Score obtenu\r\n * @returns {boolean} - true si le niveau est validé\r\n */\r\nexport const isLevelCompleted = (score) => {\r\n  return score >= 800;\r\n};\r\n\r\n/**\r\n * Calcule le bonus XP basé sur le score\r\n * @param {number} score - Score obtenu\r\n * @param {number} baseXP - XP de base du niveau\r\n * @returns {number} - XP total avec bonus\r\n */\r\nexport const calculateXPBonus = (score, baseXP) => {\r\n  let bonus = 0;\r\n  \r\n  if (score >= 950) {\r\n    bonus = 0.5; // 50% de bonus\r\n  } else if (score >= 900) {\r\n    bonus = 0.25; // 25% de bonus\r\n  }\r\n  \r\n  return Math.round(baseXP * (1 + bonus));\r\n};\r\n"],"mappings":"AAKA,OAAO,MAAMA,qBAAqB,GAAIC,kBAAkB,IAAK;EAC3D,IAAI,CAACA,kBAAkB,IAAIA,kBAAkB,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1D,OAAO;MAAEC,KAAK,EAAE,CAAC;MAAEC,UAAU,EAAE;IAAE,CAAC;EACpC;EAEA,IAAIC,WAAW,GAAG,CAAC;EACnB,IAAIC,WAAW,GAAG,CAAC;EAEnBL,kBAAkB,CAACM,OAAO,CAACC,QAAQ,IAAI;IACrC,IAAIA,QAAQ,CAACC,IAAI,KAAK,MAAM,EAAE;MAC5BJ,WAAW,IAAIG,QAAQ,CAACE,MAAM;MAC9BJ,WAAW,IAAIK,IAAI,CAACC,GAAG,CAACJ,QAAQ,CAACK,MAAM,EAAEL,QAAQ,CAACE,MAAM,CAAC;IAC3D,CAAC,MAAM,IAAIF,QAAQ,CAACC,IAAI,KAAK,MAAM,EAAE;MAEnCJ,WAAW,IAAIG,QAAQ,CAACE,MAAM;MAC9BJ,WAAW,IAAIK,IAAI,CAACC,GAAG,CAACJ,QAAQ,CAACK,MAAM,EAAEL,QAAQ,CAACE,MAAM,CAAC;IAC3D;EACF,CAAC,CAAC;EAEF,MAAMN,UAAU,GAAGC,WAAW,GAAG,CAAC,GAAIC,WAAW,GAAGD,WAAW,GAAI,GAAG,GAAG,CAAC;EAC1E,MAAMF,KAAK,GAAGQ,IAAI,CAACG,KAAK,CAAEV,UAAU,GAAG,GAAG,GAAI,IAAI,CAAC;EAEnD,OAAO;IACLD,KAAK,EAAEQ,IAAI,CAACI,GAAG,CAAC,CAAC,EAAEJ,IAAI,CAACC,GAAG,CAAC,IAAI,EAAET,KAAK,CAAC,CAAC;IACzCC,UAAU,EAAEO,IAAI,CAACG,KAAK,CAACV,UAAU;EACnC,CAAC;AACH,CAAC;AAOD,OAAO,MAAMY,gBAAgB,GAAIb,KAAK,IAAK;EACzC,OAAOA,KAAK,IAAI,GAAG;AACrB,CAAC;AAQD,OAAO,MAAMc,gBAAgB,GAAGA,CAACd,KAAK,EAAEe,MAAM,KAAK;EACjD,IAAIC,KAAK,GAAG,CAAC;EAEb,IAAIhB,KAAK,IAAI,GAAG,EAAE;IAChBgB,KAAK,GAAG,GAAG;EACb,CAAC,MAAM,IAAIhB,KAAK,IAAI,GAAG,EAAE;IACvBgB,KAAK,GAAG,IAAI;EACd;EAEA,OAAOR,IAAI,CAACG,KAAK,CAACI,MAAM,IAAI,CAAC,GAAGC,KAAK,CAAC,CAAC;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}