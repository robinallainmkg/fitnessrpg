{"ast":null,"code":"export function addEventListener(Module, ...rest) {\n  const [eventName, handler] = rest;\n  let removed = false;\n  const subscription = Module.addEventListener(eventName, handler) ?? {\n    remove: () => {\n      var _Module$removeEventLi, _Module$remove;\n      if (removed) {\n        return;\n      }\n      (_Module$removeEventLi = Module.removeEventListener) === null || _Module$removeEventLi === void 0 || _Module$removeEventLi.call(Module, eventName, handler);\n      (_Module$remove = Module.remove) === null || _Module$remove === void 0 || _Module$remove.call(Module, eventName, handler);\n      removed = true;\n    }\n  };\n  return subscription;\n}\nexport function addListener(Module, ...rest) {\n  const [eventName, handler] = rest;\n  let removed = false;\n  const subscription = Module.addListener(eventName, handler) ?? {\n    remove: () => {\n      if (removed) {\n        return;\n      }\n      Module.removeEventListener(eventName, handler);\n      removed = true;\n    }\n  };\n  return subscription;\n}","map":{"version":3,"names":["addEventListener","Module","rest","eventName","handler","removed","subscription","remove","_Module$removeEventLi","_Module$remove","removeEventListener","call","addListener"],"sources":["C:\\Users\\robin\\Documents\\RpgHybrid\\node_modules\\react-native-paper\\src\\utils\\addEventListener.tsx"],"sourcesContent":["import type {\n  NativeEventSubscription,\n  EmitterSubscription,\n} from 'react-native';\n\nexport function addEventListener<\n  T extends {\n    addEventListener: (\n      ...args: any\n    ) => NativeEventSubscription | EmitterSubscription;\n  } & { removeEventListener?: (...args: any) => void } & {\n    remove?: (...args: any) => void;\n  }\n>(Module: T, ...rest: Parameters<typeof Module.addEventListener>) {\n  const [eventName, handler] = rest;\n\n  let removed = false;\n\n  const subscription = Module.addEventListener(eventName, handler) ?? {\n    remove: () => {\n      if (removed) {\n        return;\n      }\n\n      Module.removeEventListener?.(eventName, handler);\n      Module.remove?.(eventName, handler);\n      removed = true;\n    },\n  };\n\n  return subscription;\n}\n\nexport function addListener<\n  T extends {\n    addListener: (...args: any) => EmitterSubscription;\n    removeEventListener: (...args: any) => void;\n  }\n>(Module: T, ...rest: Parameters<typeof Module.addListener>) {\n  const [eventName, handler] = rest;\n\n  let removed = false;\n\n  const subscription = Module.addListener(eventName, handler) ?? {\n    remove: () => {\n      if (removed) {\n        return;\n      }\n\n      Module.removeEventListener(eventName, handler);\n      removed = true;\n    },\n  };\n\n  return subscription;\n}\n"],"mappings":"AAKA,OAAO,SAASA,gBAAgBA,CAQ9BC,MAAS,EAAE,GAAGC,IAAgD,EAAE;EAChE,MAAM,CAACC,SAAS,EAAEC,OAAO,CAAC,GAAGF,IAAI;EAEjC,IAAIG,OAAO,GAAG,KAAK;EAEnB,MAAMC,YAAY,GAAGL,MAAM,CAACD,gBAAgB,CAACG,SAAS,EAAEC,OAAO,CAAC,IAAI;IAClEG,MAAM,EAAEA,CAAA,KAAM;MAAA,IAAAC,qBAAA,EAAAC,cAAA;MACZ,IAAIJ,OAAO,EAAE;QACX;MACF;MAEA,CAAAG,qBAAA,GAAAP,MAAM,CAACS,mBAAmB,cAAAF,qBAAA,eAA1BA,qBAAA,CAAAG,IAAA,CAAAV,MAAM,EAAuBE,SAAS,EAAEC,OAAO,CAAC;MAChD,CAAAK,cAAA,GAAAR,MAAM,CAACM,MAAM,cAAAE,cAAA,eAAbA,cAAA,CAAAE,IAAA,CAAAV,MAAM,EAAUE,SAAS,EAAEC,OAAO,CAAC;MACnCC,OAAO,GAAG,IAAI;IAChB;EACF,CAAC;EAED,OAAOC,YAAY;AACrB;AAEA,OAAO,SAASM,WAAWA,CAKzBX,MAAS,EAAE,GAAGC,IAA2C,EAAE;EAC3D,MAAM,CAACC,SAAS,EAAEC,OAAO,CAAC,GAAGF,IAAI;EAEjC,IAAIG,OAAO,GAAG,KAAK;EAEnB,MAAMC,YAAY,GAAGL,MAAM,CAACW,WAAW,CAACT,SAAS,EAAEC,OAAO,CAAC,IAAI;IAC7DG,MAAM,EAAEA,CAAA,KAAM;MACZ,IAAIF,OAAO,EAAE;QACX;MACF;MAEAJ,MAAM,CAACS,mBAAmB,CAACP,SAAS,EAAEC,OAAO,CAAC;MAC9CC,OAAO,GAAG,IAAI;IAChB;EACF,CAAC;EAED,OAAOC,YAAY;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}