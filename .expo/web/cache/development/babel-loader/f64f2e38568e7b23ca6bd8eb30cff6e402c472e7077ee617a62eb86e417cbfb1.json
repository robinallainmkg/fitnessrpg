{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\robin\\\\Documents\\\\RpgHybrid\\\\src\\\\contexts\\\\AuthContext.js\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { doc, setDoc, serverTimestamp } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet auth, db;\ntry {\n  const firebaseServices = require('../services/firebase');\n  auth = firebaseServices.auth;\n  db = firebaseServices.db;\n} catch (error) {\n  console.error('Erreur import Firebase services:', error);\n}\nconst AuthContext = createContext({});\nexport const AuthProvider = ({\n  children\n}) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    if (!auth) {\n      console.error('Auth service not available');\n      setLoading(false);\n      return;\n    }\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      setUser(user);\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const signup = async (email, password) => {\n    try {\n      const {\n        user\n      } = await createUserWithEmailAndPassword(auth, email, password);\n      await setDoc(doc(db, 'users', user.uid), {\n        email: user.email,\n        totalXP: 0,\n        createdAt: serverTimestamp()\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Erreur signup:', error);\n      return {\n        success: false,\n        error: translateFirebaseError(error.code)\n      };\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      console.log('Tentative de connexion avec:', email);\n      await signInWithEmailAndPassword(auth, email, password);\n      console.log('Connexion réussie');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Erreur login:', error);\n      console.error('Code erreur:', error.code);\n      console.error('Message:', error.message);\n      return {\n        success: false,\n        error: translateFirebaseError(error.code)\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Erreur logout:', error);\n      return {\n        success: false,\n        error: 'Erreur lors de la déconnexion'\n      };\n    }\n  };\n  const translateFirebaseError = errorCode => {\n    switch (errorCode) {\n      case 'auth/email-already-in-use':\n        return 'Cette adresse email est déjà utilisée';\n      case 'auth/invalid-email':\n        return 'Adresse email invalide';\n      case 'auth/operation-not-allowed':\n        return 'Opération non autorisée';\n      case 'auth/weak-password':\n        return 'Le mot de passe doit contenir au moins 6 caractères';\n      case 'auth/user-disabled':\n        return 'Ce compte a été désactivé';\n      case 'auth/user-not-found':\n        return 'Aucun compte trouvé avec cette adresse email';\n      case 'auth/wrong-password':\n        return 'Mot de passe incorrect';\n      case 'auth/too-many-requests':\n        return 'Trop de tentatives. Réessayez plus tard';\n      case 'auth/network-request-failed':\n        return 'Erreur de connexion. Vérifiez votre connexion internet';\n      default:\n        return 'Une erreur est survenue. Veuillez réessayer';\n    }\n  };\n  const value = {\n    user,\n    loading,\n    signup,\n    login,\n    logout\n  };\n  return _jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","doc","setDoc","serverTimestamp","jsxDEV","_jsxDEV","auth","db","firebaseServices","require","error","console","AuthContext","AuthProvider","children","user","setUser","loading","setLoading","unsubscribe","signup","email","password","uid","totalXP","createdAt","success","translateFirebaseError","code","login","log","message","logout","errorCode","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","useAuth","context","Error"],"sources":["C:/Users/robin/Documents/RpgHybrid/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword, \r\n  signOut, \r\n  onAuthStateChanged \r\n} from 'firebase/auth';\r\nimport { doc, setDoc, serverTimestamp } from 'firebase/firestore';\r\n\r\n// Import avec gestion d'erreur\r\nlet auth, db;\r\ntry {\r\n  const firebaseServices = require('../services/firebase');\r\n  auth = firebaseServices.auth;\r\n  db = firebaseServices.db;\r\n} catch (error) {\r\n  console.error('Erreur import Firebase services:', error);\r\n}\r\n\r\nconst AuthContext = createContext({});\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!auth) {\r\n      console.error('Auth service not available');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      setUser(user);\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  /**\r\n   * Inscription avec email et mot de passe\r\n   */\r\n  const signup = async (email, password) => {\r\n    try {\r\n      const { user } = await createUserWithEmailAndPassword(auth, email, password);\r\n      \r\n      // Créer le document utilisateur dans Firestore\r\n      await setDoc(doc(db, 'users', user.uid), {\r\n        email: user.email,\r\n        totalXP: 0,\r\n        createdAt: serverTimestamp()\r\n      });\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Erreur signup:', error);\r\n      return { success: false, error: translateFirebaseError(error.code) };\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Connexion avec email et mot de passe\r\n   */\r\n  const login = async (email, password) => {\r\n    try {\r\n      console.log('Tentative de connexion avec:', email);\r\n      await signInWithEmailAndPassword(auth, email, password);\r\n      console.log('Connexion réussie');\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Erreur login:', error);\r\n      console.error('Code erreur:', error.code);\r\n      console.error('Message:', error.message);\r\n      return { success: false, error: translateFirebaseError(error.code) };\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Déconnexion\r\n   */\r\n  const logout = async () => {\r\n    try {\r\n      await signOut(auth);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Erreur logout:', error);\r\n      return { success: false, error: 'Erreur lors de la déconnexion' };\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Traduit les codes d'erreur Firebase en français\r\n   */\r\n  const translateFirebaseError = (errorCode) => {\r\n    switch (errorCode) {\r\n      case 'auth/email-already-in-use':\r\n        return 'Cette adresse email est déjà utilisée';\r\n      case 'auth/invalid-email':\r\n        return 'Adresse email invalide';\r\n      case 'auth/operation-not-allowed':\r\n        return 'Opération non autorisée';\r\n      case 'auth/weak-password':\r\n        return 'Le mot de passe doit contenir au moins 6 caractères';\r\n      case 'auth/user-disabled':\r\n        return 'Ce compte a été désactivé';\r\n      case 'auth/user-not-found':\r\n        return 'Aucun compte trouvé avec cette adresse email';\r\n      case 'auth/wrong-password':\r\n        return 'Mot de passe incorrect';\r\n      case 'auth/too-many-requests':\r\n        return 'Trop de tentatives. Réessayez plus tard';\r\n      case 'auth/network-request-failed':\r\n        return 'Erreur de connexion. Vérifiez votre connexion internet';\r\n      default:\r\n        return 'Une erreur est survenue. Veuillez réessayer';\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    signup,\r\n    login,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * Hook personnalisé pour accéder au contexte d'authentification\r\n */\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}