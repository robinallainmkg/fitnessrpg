{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\robin\\\\Documents\\\\RpgHybrid\\\\src\\\\components\\\\SkillNode.js\";\nimport React, { useEffect, useRef, useState, memo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { colors } from '../theme/colors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  width\n} = Dimensions.get('window');\nconst SkillNode = ({\n  program,\n  state,\n  progress,\n  onPress,\n  onLongPress\n}) => {\n  const pulseAnim = useRef(new Animated.Value(1)).current;\n  const scaleAnim = useRef(new Animated.Value(1)).current;\n  const pressAnim = useRef(new Animated.Value(1)).current;\n  const [isPressed, setIsPressed] = useState(false);\n  const nodeState = state || 'LOCKED';\n  const getProgressPercentage = () => {\n    if (!progress || !program.levels) return 0;\n    return (progress.currentLevel - 1) / program.levels.length;\n  };\n  useEffect(() => {\n    if (nodeState === 'UNLOCKED') {\n      const startPulseAnimation = () => {\n        Animated.sequence([Animated.timing(pulseAnim, {\n          toValue: 1.08,\n          duration: 2000,\n          useNativeDriver: true\n        }), Animated.timing(pulseAnim, {\n          toValue: 1.0,\n          duration: 2000,\n          useNativeDriver: true\n        })]).start(() => startPulseAnimation());\n      };\n      startPulseAnimation();\n    } else {\n      pulseAnim.setValue(1);\n    }\n  }, [nodeState, pulseAnim]);\n  const handlePressIn = () => {\n    setIsPressed(true);\n    Animated.spring(pressAnim, {\n      toValue: 0.95,\n      useNativeDriver: true\n    }).start();\n  };\n  const handlePressOut = () => {\n    setIsPressed(false);\n    Animated.spring(pressAnim, {\n      toValue: 1,\n      useNativeDriver: true\n    }).start();\n  };\n  const getNodeContainerStyle = () => {\n    const baseTransform = [{\n      scale: pressAnim\n    }];\n    if (nodeState === 'UNLOCKED') {\n      baseTransform.push({\n        scale: pulseAnim\n      });\n    }\n    const baseStyle = {\n      transform: baseTransform,\n      width: 110,\n      height: 110,\n      borderRadius: 55,\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderWidth: 3\n    };\n    switch (nodeState) {\n      case 'LOCKED':\n        return Object.assign({}, baseStyle, {\n          backgroundColor: '#1A1A1A',\n          borderColor: '#333333',\n          borderWidth: 2\n        });\n      case 'UNLOCKED':\n        return Object.assign({}, baseStyle, {\n          backgroundColor: program.color + '4D',\n          borderColor: program.color,\n          borderWidth: 3,\n          shadowColor: program.color,\n          shadowOffset: {\n            width: 0,\n            height: 0\n          },\n          shadowOpacity: 0.6,\n          shadowRadius: 10,\n          elevation: 12\n        });\n      case 'IN_PROGRESS':\n        return Object.assign({}, baseStyle, {\n          backgroundColor: program.color + '40',\n          borderColor: '#FFD700',\n          borderWidth: 3,\n          shadowColor: '#FFD700',\n          shadowOffset: {\n            width: 0,\n            height: 2\n          },\n          shadowOpacity: 0.8,\n          shadowRadius: 8,\n          elevation: 8\n        });\n      case 'COMPLETED':\n        return Object.assign({}, baseStyle, {\n          backgroundColor: '#4CAF50' + '66',\n          borderColor: '#4CAF50',\n          borderWidth: 3,\n          shadowColor: '#4CAF50',\n          shadowOffset: {\n            width: 0,\n            height: 2\n          },\n          shadowOpacity: 0.8,\n          shadowRadius: 8,\n          elevation: 8\n        });\n      default:\n        return baseStyle;\n    }\n  };\n  const getIconStyle = () => {\n    switch (nodeState) {\n      case 'LOCKED':\n        return {\n          fontSize: 50,\n          opacity: 0.3,\n          filter: 'grayscale(100%)'\n        };\n      case 'UNLOCKED':\n      case 'IN_PROGRESS':\n      case 'COMPLETED':\n        return {\n          fontSize: 50,\n          opacity: 1\n        };\n      default:\n        return {\n          fontSize: 50\n        };\n    }\n  };\n  const getTextStyle = () => {\n    switch (nodeState) {\n      case 'LOCKED':\n        return {\n          color: '#666666',\n          fontWeight: 'normal'\n        };\n      case 'UNLOCKED':\n      case 'IN_PROGRESS':\n      case 'COMPLETED':\n        return {\n          color: '#FFFFFF',\n          fontWeight: 'bold'\n        };\n      default:\n        return {\n          color: '#FFFFFF'\n        };\n    }\n  };\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(TouchableOpacity, {\n      onPress: onPress,\n      onPressIn: handlePressIn,\n      onPressOut: handlePressOut,\n      disabled: false,\n      activeOpacity: 0.9,\n      children: [_jsxDEV(Animated.View, {\n        style: [getNodeContainerStyle()],\n        children: [_jsxDEV(Text, {\n          style: [styles.programIcon, getIconStyle()],\n          children: program.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), nodeState === 'LOCKED' && _jsxDEV(View, {\n          style: styles.lockOverlay,\n          children: _jsxDEV(Text, {\n            style: styles.lockIcon,\n            children: \"\\uD83D\\uDD12\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this), nodeState === 'IN_PROGRESS' && _jsxDEV(View, {\n          style: styles.progressRing,\n          children: [_jsxDEV(View, {\n            style: [styles.progressArc, {\n              transform: [{\n                rotate: `${getProgressPercentage() * 360}deg`\n              }]\n            }]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this), _jsxDEV(Text, {\n            style: styles.progressText,\n            children: [userProgress?.currentLevel || 1, \"/\", program.levels?.length || 4]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.badgeContainer,\n        children: [nodeState === 'UNLOCKED' && _jsxDEV(View, {\n          style: [styles.badge, styles.newBadge],\n          children: _jsxDEV(Text, {\n            style: styles.badgeText,\n            children: \"NOUVEAU\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this), nodeState === 'IN_PROGRESS' && _jsxDEV(View, {\n          style: [styles.badge, styles.progressBadge],\n          children: _jsxDEV(Text, {\n            style: styles.badgeText,\n            children: \"En cours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), nodeState === 'COMPLETED' && _jsxDEV(View, {\n          style: [styles.badge, styles.completedBadge],\n          children: _jsxDEV(Text, {\n            style: styles.badgeText,\n            children: \"\\u2705 Compl\\xE9t\\xE9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), _jsxDEV(Text, {\n      style: [styles.programName, getTextStyle()],\n      numberOfLines: 2,\n      children: program.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), nodeState === 'COMPLETED' && _jsxDEV(Text, {\n      style: styles.xpText,\n      children: [\"+\", program.xpReward || 300, \" XP\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    margin: 8,\n    width: 120\n  },\n  programIcon: {\n    textAlign: 'center'\n  },\n  lockOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    borderRadius: 55\n  },\n  lockIcon: {\n    fontSize: 30,\n    color: 'white',\n    opacity: 0.5\n  },\n  progressRing: {\n    position: 'absolute',\n    top: -3,\n    left: -3,\n    width: 116,\n    height: 116,\n    borderRadius: 58,\n    borderWidth: 4,\n    borderColor: 'transparent',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  progressArc: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: 116,\n    height: 116,\n    borderRadius: 58,\n    borderWidth: 4,\n    borderColor: '#FFD700',\n    borderRightColor: 'transparent',\n    borderBottomColor: 'transparent'\n  },\n  progressText: {\n    fontSize: 12,\n    color: '#FFD700',\n    fontWeight: 'bold',\n    position: 'absolute',\n    bottom: -25\n  },\n  badgeContainer: {\n    position: 'absolute',\n    top: -5,\n    right: -5\n  },\n  badge: {\n    borderRadius: 10,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    minWidth: 60,\n    height: 20,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  newBadge: {\n    backgroundColor: '#4CAF50'\n  },\n  progressBadge: {\n    backgroundColor: '#FF9800'\n  },\n  completedBadge: {\n    backgroundColor: '#4CAF50'\n  },\n  badgeText: {\n    fontSize: 10,\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  programName: {\n    marginTop: 12,\n    fontSize: 13,\n    fontWeight: '600',\n    textAlign: 'center',\n    lineHeight: 16,\n    maxWidth: 120\n  },\n  xpText: {\n    marginTop: 4,\n    fontSize: 11,\n    color: '#FFD700',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  }\n});\nexport default memo(SkillNode);","map":{"version":3,"names":["React","useEffect","useRef","useState","memo","View","Text","TouchableOpacity","StyleSheet","Animated","Dimensions","colors","jsxDEV","_jsxDEV","width","get","SkillNode","program","state","progress","onPress","onLongPress","pulseAnim","Value","current","scaleAnim","pressAnim","isPressed","setIsPressed","nodeState","getProgressPercentage","levels","currentLevel","length","startPulseAnimation","sequence","timing","toValue","duration","useNativeDriver","start","setValue","handlePressIn","spring","handlePressOut","getNodeContainerStyle","baseTransform","scale","push","baseStyle","transform","height","borderRadius","justifyContent","alignItems","borderWidth","Object","assign","backgroundColor","borderColor","color","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","getIconStyle","fontSize","opacity","filter","getTextStyle","fontWeight","style","styles","container","children","onPressIn","onPressOut","disabled","activeOpacity","programIcon","icon","fileName","_jsxFileName","lineNumber","columnNumber","lockOverlay","lockIcon","progressRing","progressArc","rotate","progressText","userProgress","badgeContainer","badge","newBadge","badgeText","progressBadge","completedBadge","programName","numberOfLines","name","xpText","xpReward","create","margin","textAlign","position","top","left","right","bottom","borderRightColor","borderBottomColor","paddingHorizontal","paddingVertical","minWidth","marginTop","lineHeight","maxWidth"],"sources":["C:/Users/robin/Documents/RpgHybrid/src/components/SkillNode.js"],"sourcesContent":["import React, { useEffect, useRef, useState, memo } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n  Animated,\r\n  Dimensions\r\n} from 'react-native';\r\nimport { colors } from '../theme/colors';\r\n\r\nconst { width } = Dimensions.get('window');\r\n\r\n/**\r\n * SkillNode - Nœud individuel dans l'arbre de compétences avec visuels améliorés\r\n * \r\n * États visuels drastiquement différenciés :\r\n * - LOCKED : Noir, gris, icône désaturée + cadenas\r\n * - UNLOCKED : Brillant, coloré, badge \"NOUVEAU\", animation pulse\r\n * - IN_PROGRESS : Bordure dorée, barre de progression circulaire\r\n * - COMPLETED : Vert vibrant, badge \"✅ Complété\", XP affiché\r\n */\r\nconst SkillNode = ({ \r\n  program, \r\n  state,\r\n  progress,\r\n  onPress,\r\n  onLongPress\r\n}) => {\r\n  const pulseAnim = useRef(new Animated.Value(1)).current;\r\n  const scaleAnim = useRef(new Animated.Value(1)).current;\r\n  const pressAnim = useRef(new Animated.Value(1)).current;\r\n  const [isPressed, setIsPressed] = useState(false);\r\n\r\n  // Utiliser directement l'état passé depuis SkillTreeScreen\r\n  const nodeState = state || 'LOCKED';\r\n\r\n  // Calculer le pourcentage de progression\r\n  const getProgressPercentage = () => {\r\n    if (!progress || !program.levels) return 0;\r\n    return (progress.currentLevel - 1) / program.levels.length;\r\n  };\r\n\r\n  // Animation pulse pour les nœuds UNLOCKED (plus visible)\r\n  useEffect(() => {\r\n    if (nodeState === 'UNLOCKED') {\r\n      const startPulseAnimation = () => {\r\n        Animated.sequence([\r\n          Animated.timing(pulseAnim, {\r\n            toValue: 1.08, // Plus prononcé\r\n            duration: 2000, // Plus lent\r\n            useNativeDriver: true,\r\n          }),\r\n          Animated.timing(pulseAnim, {\r\n            toValue: 1.0,\r\n            duration: 2000,\r\n            useNativeDriver: true,\r\n          }),\r\n        ]).start(() => startPulseAnimation());\r\n      };\r\n      startPulseAnimation();\r\n    } else {\r\n      // Arrêter l'animation pour les autres états\r\n      pulseAnim.setValue(1);\r\n    }\r\n  }, [nodeState, pulseAnim]);\r\n\r\n  // Animation de pression améliorée\r\n  const handlePressIn = () => {\r\n    setIsPressed(true);\r\n    Animated.spring(pressAnim, {\r\n      toValue: 0.95,\r\n      useNativeDriver: true,\r\n    }).start();\r\n  };\r\n\r\n  const handlePressOut = () => {\r\n    setIsPressed(false);\r\n    Animated.spring(pressAnim, {\r\n      toValue: 1,\r\n      useNativeDriver: true,\r\n    }).start();\r\n  };\r\n\r\n\r\n\r\n  // Styles visuels drastiquement améliorés selon l'état\r\n  const getNodeContainerStyle = () => {\r\n    const baseTransform = [{ scale: pressAnim }];\r\n    \r\n    // Ajouter l'animation pulse seulement pour UNLOCKED\r\n    if (nodeState === 'UNLOCKED') {\r\n      baseTransform.push({ scale: pulseAnim });\r\n    }\r\n\r\n    const baseStyle = {\r\n      transform: baseTransform,\r\n      width: 110,\r\n      height: 110,\r\n      borderRadius: 55,\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      borderWidth: 3,\r\n    };\r\n\r\n    switch (nodeState) {\r\n      case 'LOCKED':\r\n        return {\r\n          ...baseStyle,\r\n          backgroundColor: '#1A1A1A', // Très sombre, presque noir\r\n          borderColor: '#333333', // Gris très foncé\r\n          borderWidth: 2,\r\n          // Pas de shadow\r\n        };\r\n        \r\n      case 'UNLOCKED':\r\n        return {\r\n          ...baseStyle,\r\n          backgroundColor: program.color + '4D', // 30% opacity pour effet vibrant\r\n          borderColor: program.color,\r\n          borderWidth: 3,\r\n          // Shadow/glow vibrant\r\n          shadowColor: program.color,\r\n          shadowOffset: { width: 0, height: 0 },\r\n          shadowOpacity: 0.6,\r\n          shadowRadius: 10,\r\n          elevation: 12,\r\n        };\r\n        \r\n      case 'IN_PROGRESS':\r\n        return {\r\n          ...baseStyle,\r\n          backgroundColor: program.color + '40', // 25% opacity\r\n          borderColor: '#FFD700', // Or\r\n          borderWidth: 3,\r\n          shadowColor: '#FFD700',\r\n          shadowOffset: { width: 0, height: 2 },\r\n          shadowOpacity: 0.8,\r\n          shadowRadius: 8,\r\n          elevation: 8,\r\n        };\r\n        \r\n      case 'COMPLETED':\r\n        return {\r\n          ...baseStyle,\r\n          backgroundColor: '#4CAF50' + '66', // Vert vibrant 40% opacity  \r\n          borderColor: '#4CAF50',\r\n          borderWidth: 3,\r\n          shadowColor: '#4CAF50',\r\n          shadowOffset: { width: 0, height: 2 },\r\n          shadowOpacity: 0.8,\r\n          shadowRadius: 8,\r\n          elevation: 8,\r\n        };\r\n        \r\n      default:\r\n        return baseStyle;\r\n    }\r\n  };\r\n\r\n  // Style de l'icône selon l'état\r\n  const getIconStyle = () => {\r\n    switch (nodeState) {\r\n      case 'LOCKED':\r\n        return {\r\n          fontSize: 50,\r\n          opacity: 0.3, // Très désaturée\r\n          filter: 'grayscale(100%)', // Grayscale (ne marche pas sur RN, mais bon)\r\n        };\r\n      case 'UNLOCKED':\r\n      case 'IN_PROGRESS':\r\n      case 'COMPLETED':\r\n        return {\r\n          fontSize: 50,\r\n          opacity: 1,\r\n        };\r\n      default:\r\n        return { fontSize: 50 };\r\n    }\r\n  };\r\n\r\n  // Style du texte selon l'état\r\n  const getTextStyle = () => {\r\n    switch (nodeState) {\r\n      case 'LOCKED':\r\n        return {\r\n          color: '#666666',\r\n          fontWeight: 'normal',\r\n        };\r\n      case 'UNLOCKED':\r\n      case 'IN_PROGRESS':  \r\n      case 'COMPLETED':\r\n        return {\r\n          color: '#FFFFFF',\r\n          fontWeight: 'bold',\r\n        };\r\n      default:\r\n        return { color: '#FFFFFF' };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <TouchableOpacity\r\n        onPress={onPress}\r\n        onPressIn={handlePressIn}\r\n        onPressOut={handlePressOut}\r\n        disabled={false}\r\n        activeOpacity={0.9}\r\n      >\r\n        {/* Nœud principal avec nouveau style */}\r\n        <Animated.View style={[getNodeContainerStyle()]}>\r\n          {/* Icône du programme */}\r\n          <Text style={[styles.programIcon, getIconStyle()]}>\r\n            {program.icon}\r\n          </Text>\r\n\r\n          {/* Cadenas superposé pour LOCKED */}\r\n          {nodeState === 'LOCKED' && (\r\n            <View style={styles.lockOverlay}>\r\n              <Text style={styles.lockIcon}>🔒</Text>\r\n            </View>\r\n          )}\r\n\r\n          {/* Barre de progression circulaire pour IN_PROGRESS */}\r\n          {nodeState === 'IN_PROGRESS' && (\r\n            <View style={styles.progressRing}>\r\n              <View \r\n                style={[\r\n                  styles.progressArc,\r\n                  { \r\n                    transform: [{ \r\n                      rotate: `${getProgressPercentage() * 360}deg` \r\n                    }]\r\n                  }\r\n                ]} \r\n              />\r\n              <Text style={styles.progressText}>\r\n                {userProgress?.currentLevel || 1}/{program.levels?.length || 4}\r\n              </Text>\r\n            </View>\r\n          )}\r\n        </Animated.View>\r\n\r\n        {/* Badges selon l'état */}\r\n        <View style={styles.badgeContainer}>\r\n          {nodeState === 'UNLOCKED' && (\r\n            <View style={[styles.badge, styles.newBadge]}>\r\n              <Text style={styles.badgeText}>NOUVEAU</Text>\r\n            </View>\r\n          )}\r\n          \r\n          {nodeState === 'IN_PROGRESS' && (\r\n            <View style={[styles.badge, styles.progressBadge]}>\r\n              <Text style={styles.badgeText}>En cours</Text>\r\n            </View>\r\n          )}\r\n          \r\n          {nodeState === 'COMPLETED' && (\r\n            <View style={[styles.badge, styles.completedBadge]}>\r\n              <Text style={styles.badgeText}>✅ Complété</Text>\r\n            </View>\r\n          )}\r\n        </View>\r\n      </TouchableOpacity>\r\n\r\n      {/* Nom du programme */}\r\n      <Text style={[styles.programName, getTextStyle()]} numberOfLines={2}>\r\n        {program.name}\r\n      </Text>\r\n\r\n      {/* XP gagné pour les programmes complétés */}\r\n      {nodeState === 'COMPLETED' && (\r\n        <Text style={styles.xpText}>\r\n          +{program.xpReward || 300} XP\r\n        </Text>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: 'center',\r\n    margin: 8,\r\n    width: 120, // Augmenté pour les nouveaux nœuds 110px\r\n  },\r\n  programIcon: {\r\n    textAlign: 'center',\r\n    // fontSize et opacity définis dynamiquement dans getIconStyle()\r\n  },\r\n  lockOverlay: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n    borderRadius: 55,\r\n  },\r\n  lockIcon: {\r\n    fontSize: 30,\r\n    color: 'white',\r\n    opacity: 0.5,\r\n  },\r\n  progressRing: {\r\n    position: 'absolute',\r\n    top: -3,\r\n    left: -3,\r\n    width: 116, // 110 + 6px pour la bordure\r\n    height: 116,\r\n    borderRadius: 58,\r\n    borderWidth: 4,\r\n    borderColor: 'transparent',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  progressArc: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    width: 116,\r\n    height: 116,\r\n    borderRadius: 58,\r\n    borderWidth: 4,\r\n    borderColor: '#FFD700',\r\n    borderRightColor: 'transparent',\r\n    borderBottomColor: 'transparent',\r\n  },\r\n  progressText: {\r\n    fontSize: 12,\r\n    color: '#FFD700',\r\n    fontWeight: 'bold',\r\n    position: 'absolute',\r\n    bottom: -25,\r\n  },\r\n  badgeContainer: {\r\n    position: 'absolute',\r\n    top: -5,\r\n    right: -5,\r\n  },\r\n  badge: {\r\n    borderRadius: 10,\r\n    paddingHorizontal: 8,\r\n    paddingVertical: 4,\r\n    minWidth: 60,\r\n    height: 20,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  newBadge: {\r\n    backgroundColor: '#4CAF50',\r\n  },\r\n  progressBadge: {\r\n    backgroundColor: '#FF9800',\r\n  },\r\n  completedBadge: {\r\n    backgroundColor: '#4CAF50',\r\n  },\r\n  badgeText: {\r\n    fontSize: 10,\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n  },\r\n  programName: {\r\n    marginTop: 12,\r\n    fontSize: 13,\r\n    fontWeight: '600',\r\n    textAlign: 'center',\r\n    lineHeight: 16,\r\n    maxWidth: 120,\r\n    // color définie dynamiquement dans getTextStyle()\r\n  },\r\n  xpText: {\r\n    marginTop: 4,\r\n    fontSize: 11,\r\n    color: '#FFD700',\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default memo(SkillNode);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}