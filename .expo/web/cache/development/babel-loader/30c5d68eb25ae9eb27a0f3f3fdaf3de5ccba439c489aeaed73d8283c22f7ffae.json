{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\robin\\\\Documents\\\\RpgHybrid\\\\src\\\\screens\\\\SkillTreeScreen.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Modal from \"react-native-paper/lib/module/components/Modal\";\nimport Portal from \"react-native-paper/lib/module/components/Portal/Portal\";\nimport Button from \"react-native-paper/lib/module/components/Button/Button\";\nimport Divider from \"react-native-paper/lib/module/components/Divider\";\nimport Badge from \"react-native-paper/lib/module/components/Badge\";\nimport IconButton from \"react-native-paper/lib/module/components/IconButton/IconButton\";\nimport { collection, doc, getDocs, getDoc, query, where } from 'firebase/firestore';\nimport { db } from '../services/firebase';\nimport { useAuth } from '../contexts/AuthContext';\nimport SkillNode from '../components/SkillNode';\nimport programs from '../data/programs.json';\nimport { colors } from '../theme/colors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  width: screenWidth,\n  height: screenHeight\n} = Dimensions.get('window');\nconst NODE_SIZE = 80;\nconst PADDING = 20;\nconst COLUMN_WIDTH = Math.max(120, (screenWidth - PADDING * 2) / 5);\nconst ROW_HEIGHT = Math.max(140, COLUMN_WIDTH * 1.2);\nconst TREE_WIDTH = 5 * COLUMN_WIDTH;\nconst TREE_HEIGHT = 10 * ROW_HEIGHT;\nconst SkillTreeScreen = ({\n  navigation\n}) => {\n  const {\n    user\n  } = useAuth();\n  const userId = user?.uid;\n  const [userProgress, setUserProgress] = useState({});\n  const [completedPrograms, setCompletedPrograms] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [selectedProgram, setSelectedProgram] = useState(null);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [animatedLines, setAnimatedLines] = useState(new Map());\n  const ADMIN_EMAILS = [];\n  const isAdmin = user?.email && ADMIN_EMAILS.includes(user.email);\n  const [userStats, setUserStats] = useState({\n    totalCompleted: 0,\n    totalXP: 0,\n    currentTier: 0\n  });\n  const streetCategory = programs.categories.find(cat => cat.id === 'street');\n  const streetPrograms = streetCategory?.programs || [];\n  const loadUserData = useCallback(async () => {\n    if (!userId) return;\n    try {\n      setLoading(true);\n      const progressQuery = query(collection(db, 'userProgress'), where('userId', '==', userId));\n      const progressSnapshot = await getDocs(progressQuery);\n      const progressData = {};\n      progressSnapshot.forEach(doc => {\n        const data = doc.data();\n        progressData[data.programId] = data;\n      });\n      setUserProgress(progressData);\n      const userDoc = await getDoc(doc(db, 'users', userId));\n      const userData = userDoc.data();\n      const completed = userData?.completedPrograms || [];\n      setCompletedPrograms(completed);\n      const totalCompleted = completed.length;\n      const totalXP = completed.reduce((sum, programId) => {\n        const program = streetPrograms.find(p => p.id === programId);\n        return sum + (program?.xpReward || 0);\n      }, 0);\n      let currentTier = 0;\n      streetPrograms.forEach(program => {\n        const isUnlocked = program.prerequisites.length === 0 || program.prerequisites.every(prereq => completed.includes(prereq));\n        if (isUnlocked && program.position.tier > currentTier) {\n          currentTier = program.position.tier;\n        }\n      });\n      setUserStats({\n        totalCompleted,\n        totalXP,\n        currentTier\n      });\n    } catch (error) {\n      console.error('Erreur lors du chargement des données:', error);\n      Alert.alert('Erreur', 'Impossible de charger vos progrès');\n    } finally {\n      setLoading(false);\n      setDataLoaded(true);\n    }\n  }, [userId]);\n  useEffect(() => {\n    if (userId && !dataLoaded) {\n      loadUserData();\n    }\n  }, [userId]);\n  const getProgramState = useCallback(program => {\n    const isCompleted = completedPrograms.includes(program.id);\n    const isUnlocked = program.prerequisites.length === 0 || program.prerequisites.every(prereq => completedPrograms.includes(prereq));\n    const progress = userProgress[program.id];\n    const hasProgress = progress && progress.currentLevel > 0;\n    if (isAdmin) {\n      if (isCompleted) return 'COMPLETED';\n      if (hasProgress) return 'IN_PROGRESS';\n      return 'UNLOCKED';\n    }\n    if (program.id === 'beginner-foundation') {\n      if (isCompleted) return 'COMPLETED';\n      if (hasProgress) return 'IN_PROGRESS';\n      return 'UNLOCKED';\n    }\n    if (isCompleted) return 'COMPLETED';\n    if (hasProgress) return 'IN_PROGRESS';\n    if (isUnlocked) return 'UNLOCKED';\n    return 'LOCKED';\n  }, [completedPrograms, userProgress, isAdmin]);\n  const handleNodePress = useCallback(program => {\n    console.log('🔥 CLIC DÉTECTÉ sur:', program.name, 'ID:', program.id);\n    const state = getProgramState(program);\n    const isUnlocked = state === 'UNLOCKED' || state === 'IN_PROGRESS' || state === 'COMPLETED';\n    const progress = userProgress[program.id];\n    console.log('🔥 Clic sur programme:', program.name, 'État:', state, 'Débloqué:', isUnlocked);\n    navigation.navigate('ProgramDetail', {\n      program,\n      category: streetCategory?.name || 'Street Workout',\n      userProgress: progress || null,\n      isLocked: !isUnlocked,\n      programState: state,\n      completedPrograms,\n      allPrograms: streetPrograms\n    });\n  }, [getProgramState, completedPrograms, streetPrograms, navigation, streetCategory, userProgress]);\n  const handleNodeLongPress = useCallback(program => {\n    setSelectedProgram(program);\n    setModalVisible(true);\n  }, []);\n  const getPrerequisitesWithStatus = useCallback(program => {\n    return program.prerequisites.map(prereqId => {\n      const prereqProgram = streetPrograms.find(p => p.id === prereqId);\n      const isCompleted = completedPrograms.includes(prereqId);\n      return {\n        id: prereqId,\n        name: prereqProgram?.name || prereqId,\n        completed: isCompleted\n      };\n    });\n  }, [streetPrograms, completedPrograms]);\n  const getUnlockedPrograms = useCallback(program => {\n    return program.unlocks?.map(unlockedId => {\n      const unlockedProgram = streetPrograms.find(p => p.id === unlockedId);\n      return {\n        id: unlockedId,\n        name: unlockedProgram?.name || unlockedId\n      };\n    }) || [];\n  }, [streetPrograms]);\n  const closeModal = useCallback(() => {\n    setModalVisible(false);\n    setSelectedProgram(null);\n  }, []);\n  const navigateToDetailsFromModal = useCallback(() => {\n    if (selectedProgram) {\n      closeModal();\n      handleNodePress(selectedProgram);\n    }\n  }, [selectedProgram, closeModal, handleNodePress]);\n  const animateLineUnlock = useCallback(lineId => {\n    const animValue = new Animated.Value(0.15);\n    setAnimatedLines(prev => new Map(prev.set(lineId, animValue)));\n    Animated.timing(animValue, {\n      toValue: 0.8,\n      duration: 500,\n      useNativeDriver: false\n    }).start();\n  }, []);\n  useEffect(() => {\n    streetPrograms.forEach(program => {\n      if (program.unlocks && program.unlocks.length > 0) {\n        program.unlocks.forEach(unlockedId => {\n          const unlockedProgram = streetPrograms.find(p => p.id === unlockedId);\n          if (unlockedProgram) {\n            const toState = getProgramState(unlockedProgram);\n            const lineId = `${program.id}-${unlockedId}`;\n            if ((toState === 'UNLOCKED' || toState === 'IN_PROGRESS' || toState === 'COMPLETED') && !animatedLines.has(lineId)) {\n              animateLineUnlock(lineId);\n            }\n          }\n        });\n      }\n    });\n  }, [completedPrograms, userProgress, animateLineUnlock, streetPrograms, getProgramState, animatedLines]);\n  const calculateConnectionLine = useCallback((fromProgram, toProgram) => {\n    const SKILLNODE_MARGIN = 8;\n    const SKILLNODE_CONTAINER_WIDTH = 100;\n    const fromContainerX = fromProgram.position.x * COLUMN_WIDTH + (COLUMN_WIDTH - SKILLNODE_CONTAINER_WIDTH) / 2 + PADDING;\n    const fromContainerY = fromProgram.position.y * ROW_HEIGHT + (ROW_HEIGHT - NODE_SIZE) / 2 + PADDING;\n    const toContainerX = toProgram.position.x * COLUMN_WIDTH + (COLUMN_WIDTH - SKILLNODE_CONTAINER_WIDTH) / 2 + PADDING;\n    const toContainerY = toProgram.position.y * ROW_HEIGHT + (ROW_HEIGHT - NODE_SIZE) / 2 + PADDING;\n    const nodeOffset = (SKILLNODE_CONTAINER_WIDTH - NODE_SIZE) / 2 + 5;\n    const fromCenterX = fromContainerX + nodeOffset + NODE_SIZE / 2;\n    const fromCenterY = fromContainerY + SKILLNODE_MARGIN + NODE_SIZE / 2;\n    const toCenterX = toContainerX + nodeOffset + NODE_SIZE / 2;\n    const toCenterY = toContainerY + SKILLNODE_MARGIN + NODE_SIZE / 2;\n    const deltaX = toCenterX - fromCenterX;\n    const deltaY = toCenterY - fromCenterY;\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    const angle = Math.atan2(deltaY, deltaX) * (180 / Math.PI);\n    return {\n      position: 'absolute',\n      left: fromCenterX,\n      top: fromCenterY - 1.5,\n      width: distance,\n      backgroundColor: 'transparent',\n      transform: `rotate(${angle}deg)`,\n      transformOrigin: '0 50%'\n    };\n  }, []);\n  const renderConnections = useCallback(() => {\n    const connections = [];\n    streetPrograms.forEach((program, index) => {\n      if (program.unlocks && program.unlocks.length > 0) {\n        program.unlocks.forEach(unlockedId => {\n          const unlockedProgram = streetPrograms.find(p => p.id === unlockedId);\n          if (unlockedProgram) {\n            const lineStyle = calculateConnectionLine(program, unlockedProgram);\n            const fromState = getProgramState(program);\n            const toState = getProgramState(unlockedProgram);\n            const isUnlocked = toState === 'UNLOCKED' || toState === 'IN_PROGRESS' || toState === 'COMPLETED';\n            let lineColor, opacity, height, shadowColor;\n            if (isUnlocked) {\n              lineColor = program.color || colors.primary;\n              opacity = 0.8;\n              height = 3;\n              shadowColor = program.color || colors.primary;\n            } else {\n              lineColor = '#333333';\n              opacity = 0.15;\n              height = 2;\n              shadowColor = 'transparent';\n            }\n            if (!isUnlocked) {\n              const segmentLength = 6;\n              const gapLength = 4;\n              const totalSegmentLength = segmentLength + gapLength;\n              const segmentCount = Math.floor(lineStyle.width / totalSegmentLength);\n              for (let i = 0; i < segmentCount; i++) {\n                connections.push(_jsxDEV(View, {\n                  style: [lineStyle, {\n                    left: lineStyle.left + i * totalSegmentLength,\n                    width: segmentLength,\n                    height: height,\n                    backgroundColor: lineColor,\n                    opacity: opacity,\n                    zIndex: 1,\n                    borderRadius: 1\n                  }]\n                }, `${program.id}-${unlockedId}-dash-${i}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 331,\n                  columnNumber: 19\n                }, this));\n              }\n            } else {\n              const lineId = `${program.id}-${unlockedId}`;\n              const animatedOpacity = animatedLines.get(lineId);\n              if (animatedOpacity) {\n                connections.push(_jsxDEV(Animated.View, {\n                  style: [lineStyle, {\n                    height: height,\n                    backgroundColor: lineColor,\n                    opacity: animatedOpacity,\n                    zIndex: 1,\n                    borderRadius: 1.5,\n                    shadowColor: shadowColor,\n                    shadowOffset: {\n                      width: 0,\n                      height: 0\n                    },\n                    shadowOpacity: 0.6,\n                    shadowRadius: 4,\n                    elevation: 2\n                  }]\n                }, lineId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 356,\n                  columnNumber: 19\n                }, this));\n              } else {\n                connections.push(_jsxDEV(View, {\n                  style: [lineStyle, {\n                    height: height,\n                    backgroundColor: lineColor,\n                    opacity: opacity,\n                    zIndex: 1,\n                    borderRadius: 1.5,\n                    shadowColor: shadowColor,\n                    shadowOffset: {\n                      width: 0,\n                      height: 0\n                    },\n                    shadowOpacity: 0.6,\n                    shadowRadius: 4,\n                    elevation: 2\n                  }]\n                }, lineId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 19\n                }, this));\n              }\n            }\n          }\n        });\n      }\n    });\n    return connections;\n  }, [streetPrograms, calculateConnectionLine, getProgramState]);\n  const renderModal = () => {\n    if (!selectedProgram) return null;\n    const programState = getProgramState(selectedProgram);\n    const prerequisites = getPrerequisitesWithStatus(selectedProgram);\n    const unlockedPrograms = getUnlockedPrograms(selectedProgram);\n    return _jsxDEV(Portal, {\n      children: _jsxDEV(Modal, {\n        visible: modalVisible,\n        onDismiss: closeModal,\n        contentContainerStyle: [styles.modalContainer, {\n          borderColor: selectedProgram.color\n        }],\n        children: [_jsxDEV(View, {\n          style: styles.modalHeader,\n          children: [_jsxDEV(Text, {\n            style: styles.modalIcon,\n            children: selectedProgram.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this), _jsxDEV(IconButton, {\n            icon: \"close\",\n            size: 24,\n            onPress: closeModal,\n            style: styles.modalCloseButton\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this), _jsxDEV(View, {\n          style: styles.modalTitleSection,\n          children: [_jsxDEV(Text, {\n            style: styles.modalTitle,\n            children: selectedProgram.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 13\n          }, this), _jsxDEV(Badge, {\n            style: [styles.difficultyBadge, {\n              backgroundColor: selectedProgram.color\n            }],\n            children: selectedProgram.difficulty\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), _jsxDEV(Text, {\n          style: styles.modalDescription,\n          children: selectedProgram.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this), _jsxDEV(Divider, {\n          style: styles.modalDivider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this), _jsxDEV(View, {\n          style: styles.modalInfoSection,\n          children: [_jsxDEV(Text, {\n            style: styles.modalSectionTitle,\n            children: \"\\uD83D\\uDCCA Informations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 13\n          }, this), _jsxDEV(View, {\n            style: styles.modalInfoGrid,\n            children: [_jsxDEV(View, {\n              style: styles.modalInfoItem,\n              children: [_jsxDEV(Text, {\n                style: styles.modalInfoLabel,\n                children: \"Dur\\xE9e\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 17\n              }, this), _jsxDEV(Text, {\n                style: styles.modalInfoValue,\n                children: [selectedProgram.totalWeeks, \" semaines\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 15\n            }, this), _jsxDEV(View, {\n              style: styles.modalInfoItem,\n              children: [_jsxDEV(Text, {\n                style: styles.modalInfoLabel,\n                children: \"XP Reward\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 17\n              }, this), _jsxDEV(Text, {\n                style: styles.modalInfoValue,\n                children: [selectedProgram.xpReward, \" XP\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this), _jsxDEV(Divider, {\n          style: styles.modalDivider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this), prerequisites.length > 0 && _jsxDEV(View, {\n          style: styles.modalSection,\n          children: [_jsxDEV(Text, {\n            style: styles.modalSectionTitle,\n            children: \"\\uD83D\\uDD12 Pr\\xE9requis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 15\n          }, this), prerequisites.map(prereq => _jsxDEV(View, {\n            style: styles.modalPrereqItem,\n            children: [_jsxDEV(Text, {\n              style: styles.modalPrereqText,\n              children: [\"\\u2022 \", prereq.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 19\n            }, this), _jsxDEV(Badge, {\n              style: [styles.modalPrereqBadge, {\n                backgroundColor: prereq.completed ? colors.success : colors.error\n              }],\n              children: prereq.completed ? '✓' : '✗'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 19\n            }, this)]\n          }, prereq.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 13\n        }, this), unlockedPrograms.length > 0 && _jsxDEV(View, {\n          style: styles.modalSection,\n          children: [_jsxDEV(Text, {\n            style: styles.modalSectionTitle,\n            children: \"\\uD83D\\uDD13 D\\xE9bloque\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 15\n          }, this), unlockedPrograms.map(program => _jsxDEV(Text, {\n            style: styles.modalUnlockText,\n            children: [\"\\u2022 \", program.name]\n          }, program.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 13\n        }, this), _jsxDEV(View, {\n          style: styles.modalActions,\n          children: _jsxDEV(Button, {\n            mode: \"contained\",\n            onPress: navigateToDetailsFromModal,\n            style: [styles.modalButton, {\n              backgroundColor: selectedProgram.color\n            }],\n            labelStyle: styles.modalButtonText,\n            children: \"Voir les d\\xE9tails\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this);\n  };\n  if (loading) {\n    return _jsxDEV(View, {\n      style: styles.loadingContainer,\n      children: [_jsxDEV(ActivityIndicator, {\n        size: \"large\",\n        color: colors.primary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        style: styles.loadingText,\n        children: \"Chargement de votre arbre...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 7\n    }, this);\n  }\n  return _jsxDEV(SafeAreaView, {\n    style: styles.container,\n    children: [_jsxDEV(View, {\n      style: styles.header,\n      children: [_jsxDEV(Text, {\n        style: styles.headerTitle,\n        children: \"\\uD83C\\uDFCB\\uFE0F Street Workout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.statsContainer,\n        children: _jsxDEV(Text, {\n          style: styles.statsText,\n          children: [userStats.totalCompleted, \"/\", streetPrograms.length, \" \\u2022 \", userStats.totalXP, \" XP \\u2022 Tier \", userStats.currentTier]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 7\n    }, this), isAdmin && _jsxDEV(View, {\n      style: styles.adminBadge,\n      children: _jsxDEV(Text, {\n        style: styles.adminText,\n        children: \"\\uD83D\\uDC51 MODE ADMIN - Tous les programmes d\\xE9bloqu\\xE9s\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 9\n    }, this), _jsxDEV(ScrollView, {\n      horizontal: true,\n      showsHorizontalScrollIndicator: false,\n      contentContainerStyle: {\n        minWidth: TREE_WIDTH + PADDING * 2\n      },\n      style: styles.horizontalScroll,\n      children: _jsxDEV(ScrollView, {\n        showsVerticalScrollIndicator: false,\n        contentContainerStyle: {\n          minHeight: TREE_HEIGHT + PADDING * 2,\n          paddingHorizontal: PADDING,\n          paddingVertical: PADDING\n        },\n        style: styles.verticalScroll,\n        children: _jsxDEV(View, {\n          style: styles.treeContainer,\n          children: [renderConnections(), streetPrograms.map(program => {\n            let state = getProgramState(program);\n            const progress = userProgress[program.id];\n            if (program.id === 'beginner-foundation') {\n              state = progress && progress.currentLevel > 0 ? 'IN_PROGRESS' : completedPrograms.includes(program.id) ? 'COMPLETED' : 'UNLOCKED';\n            }\n            return _jsxDEV(View, {\n              style: [styles.nodeContainer, {\n                left: program.position.x * COLUMN_WIDTH + (COLUMN_WIDTH - 100) / 2 + PADDING,\n                top: program.position.y * ROW_HEIGHT + (ROW_HEIGHT - NODE_SIZE) / 2 + PADDING\n              }],\n              children: _jsxDEV(SkillNode, {\n                program: program,\n                state: state,\n                progress: progress,\n                onPress: () => handleNodePress(program),\n                onLongPress: () => handleNodeLongPress(program)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 586,\n                columnNumber: 19\n              }, this)\n            }, program.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 7\n    }, this), _jsxDEV(View, {\n      style: styles.legend,\n      children: [_jsxDEV(View, {\n        style: styles.legendRow,\n        children: [_jsxDEV(Text, {\n          style: styles.legendItem,\n          children: \"\\uD83D\\uDD12 Verrouill\\xE9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 11\n        }, this), _jsxDEV(Text, {\n          style: styles.legendItem,\n          children: \"\\uD83D\\uDFE2 Disponible\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.legendRow,\n        children: [_jsxDEV(Text, {\n          style: styles.legendItem,\n          children: \"\\uD83D\\uDFE1 En cours\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 11\n        }, this), _jsxDEV(Text, {\n          style: styles.legendItem,\n          children: \"\\u2705 Compl\\xE9t\\xE9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 7\n    }, this), renderModal()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 530,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: colors.background\n  },\n  loadingText: {\n    color: colors.textPrimary,\n    marginTop: 16,\n    fontSize: 16\n  },\n  header: {\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: colors.textPrimary,\n    textAlign: 'center',\n    marginBottom: 8\n  },\n  statsContainer: {\n    alignItems: 'center'\n  },\n  statsText: {\n    fontSize: 14,\n    color: colors.textSecondary\n  },\n  horizontalScroll: {\n    flex: 1\n  },\n  verticalScroll: {\n    flex: 1\n  },\n  treeContainer: {\n    width: TREE_WIDTH,\n    height: TREE_HEIGHT,\n    position: 'relative'\n  },\n  nodeContainer: {\n    position: 'absolute',\n    width: NODE_SIZE,\n    height: NODE_SIZE,\n    zIndex: 10\n  },\n  connectionLine: {\n    position: 'absolute',\n    height: 4,\n    borderRadius: 2,\n    zIndex: 1,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.4,\n    shadowRadius: 3,\n    elevation: 3,\n    borderWidth: 0.5,\n    borderColor: 'rgba(255, 255, 255, 0.1)'\n  },\n  legend: {\n    padding: 16,\n    borderTopWidth: 1,\n    borderTopColor: colors.border,\n    backgroundColor: colors.surface\n  },\n  legendRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginBottom: 4\n  },\n  legendItem: {\n    fontSize: 12,\n    color: colors.textSecondary\n  },\n  adminBadge: {\n    backgroundColor: colors.success,\n    marginHorizontal: 16,\n    marginVertical: 8,\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 20,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  adminText: {\n    color: 'white',\n    fontSize: 14,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  modalContainer: {\n    backgroundColor: colors.surface,\n    margin: 20,\n    borderRadius: 16,\n    padding: 24,\n    maxHeight: screenHeight * 0.8,\n    borderWidth: 2\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16\n  },\n  modalIcon: {\n    fontSize: 48,\n    textAlign: 'center'\n  },\n  modalCloseButton: {\n    margin: 0,\n    padding: 0\n  },\n  modalTitleSection: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 12\n  },\n  modalTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: colors.text,\n    flex: 1\n  },\n  difficultyBadge: {\n    marginLeft: 12\n  },\n  modalDescription: {\n    fontSize: 16,\n    color: colors.textSecondary,\n    lineHeight: 22,\n    marginBottom: 16\n  },\n  modalDivider: {\n    marginVertical: 16\n  },\n  modalInfoSection: {\n    marginBottom: 8\n  },\n  modalSectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: colors.text,\n    marginBottom: 12\n  },\n  modalInfoGrid: {\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  modalInfoItem: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  modalInfoLabel: {\n    fontSize: 14,\n    color: colors.textSecondary,\n    marginBottom: 4\n  },\n  modalInfoValue: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: colors.text\n  },\n  modalSection: {\n    marginBottom: 16\n  },\n  modalPrereqItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8\n  },\n  modalPrereqText: {\n    fontSize: 16,\n    color: colors.text,\n    flex: 1\n  },\n  modalPrereqBadge: {\n    marginLeft: 12,\n    minWidth: 24\n  },\n  modalUnlockText: {\n    fontSize: 16,\n    color: colors.text,\n    marginBottom: 4\n  },\n  modalActions: {\n    marginTop: 8\n  },\n  modalButton: {\n    borderRadius: 8\n  },\n  modalButtonText: {\n    fontSize: 16,\n    fontWeight: '600'\n  }\n});\nexport default SkillTreeScreen;","map":{"version":3,"names":["React","useState","useEffect","useCallback","View","Text","ScrollView","Dimensions","StyleSheet","Alert","TouchableOpacity","ActivityIndicator","SafeAreaView","Animated","Modal","Portal","Button","Divider","Badge","IconButton","collection","doc","getDocs","getDoc","query","where","db","useAuth","SkillNode","programs","colors","jsxDEV","_jsxDEV","width","screenWidth","height","screenHeight","get","NODE_SIZE","PADDING","COLUMN_WIDTH","Math","max","ROW_HEIGHT","TREE_WIDTH","TREE_HEIGHT","SkillTreeScreen","navigation","user","userId","uid","userProgress","setUserProgress","completedPrograms","setCompletedPrograms","loading","setLoading","dataLoaded","setDataLoaded","selectedProgram","setSelectedProgram","modalVisible","setModalVisible","animatedLines","setAnimatedLines","Map","ADMIN_EMAILS","isAdmin","email","includes","userStats","setUserStats","totalCompleted","totalXP","currentTier","streetCategory","categories","find","cat","id","streetPrograms","loadUserData","progressQuery","progressSnapshot","progressData","forEach","data","programId","userDoc","userData","completed","length","reduce","sum","program","p","xpReward","isUnlocked","prerequisites","every","prereq","position","tier","error","console","alert","getProgramState","isCompleted","progress","hasProgress","currentLevel","handleNodePress","log","name","state","navigate","category","isLocked","programState","allPrograms","handleNodeLongPress","getPrerequisitesWithStatus","map","prereqId","prereqProgram","getUnlockedPrograms","unlocks","unlockedId","unlockedProgram","closeModal","navigateToDetailsFromModal","animateLineUnlock","lineId","animValue","Value","prev","set","timing","toValue","duration","useNativeDriver","start","toState","has","calculateConnectionLine","fromProgram","toProgram","SKILLNODE_MARGIN","SKILLNODE_CONTAINER_WIDTH","fromContainerX","x","fromContainerY","y","toContainerX","toContainerY","nodeOffset","fromCenterX","fromCenterY","toCenterX","toCenterY","deltaX","deltaY","distance","sqrt","angle","atan2","PI","left","top","backgroundColor","transform","transformOrigin","renderConnections","connections","index","lineStyle","fromState","lineColor","opacity","shadowColor","color","primary","segmentLength","gapLength","totalSegmentLength","segmentCount","floor","i","push","style","zIndex","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","animatedOpacity","shadowOffset","shadowOpacity","shadowRadius","elevation","renderModal","unlockedPrograms","children","visible","onDismiss","contentContainerStyle","styles","modalContainer","borderColor","modalHeader","modalIcon","icon","size","onPress","modalCloseButton","modalTitleSection","modalTitle","difficultyBadge","difficulty","modalDescription","description","modalDivider","modalInfoSection","modalSectionTitle","modalInfoGrid","modalInfoItem","modalInfoLabel","modalInfoValue","totalWeeks","modalSection","modalPrereqItem","modalPrereqText","modalPrereqBadge","success","modalUnlockText","modalActions","mode","modalButton","labelStyle","modalButtonText","loadingContainer","loadingText","container","header","headerTitle","statsContainer","statsText","adminBadge","adminText","horizontal","showsHorizontalScrollIndicator","minWidth","horizontalScroll","showsVerticalScrollIndicator","minHeight","paddingHorizontal","paddingVertical","verticalScroll","treeContainer","nodeContainer","onLongPress","legend","legendRow","legendItem","create","flex","background","justifyContent","alignItems","textPrimary","marginTop","fontSize","padding","borderBottomWidth","borderBottomColor","border","fontWeight","textAlign","marginBottom","textSecondary","connectionLine","borderWidth","borderTopWidth","borderTopColor","surface","flexDirection","marginHorizontal","marginVertical","margin","maxHeight","text","marginLeft","lineHeight"],"sources":["C:/Users/robin/Documents/RpgHybrid/src/screens/SkillTreeScreen.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  ScrollView,\r\n  Dimensions,\r\n  StyleSheet,\r\n  Alert,\r\n  TouchableOpacity,\r\n  ActivityIndicator,\r\n  SafeAreaView,\r\n  Animated\r\n} from 'react-native';\r\nimport { Modal, Portal, Button, Divider, Badge, IconButton } from 'react-native-paper';\r\nimport { collection, doc, getDocs, getDoc, query, where } from 'firebase/firestore';\r\nimport { db } from '../services/firebase';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport SkillNode from '../components/SkillNode';\r\nimport programs from '../data/programs.json';\r\nimport { colors } from '../theme/colors';\r\n\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get('window');\r\n\r\n// Dimensions responsives de l'arbre\r\nconst NODE_SIZE = 80;\r\nconst PADDING = 20;\r\n// Calcul responsive : largeur disponible / 5 colonnes\r\nconst COLUMN_WIDTH = Math.max(120, (screenWidth - PADDING * 2) / 5);\r\n// Hauteur adaptée pour 10 tiers\r\nconst ROW_HEIGHT = Math.max(140, COLUMN_WIDTH * 1.2);\r\nconst TREE_WIDTH = 5 * COLUMN_WIDTH;\r\nconst TREE_HEIGHT = 10 * ROW_HEIGHT;\r\n\r\nconst SkillTreeScreen = ({ navigation }) => {\r\n  const { user } = useAuth();\r\n  const userId = user?.uid;\r\n  const [userProgress, setUserProgress] = useState({});\r\n  const [completedPrograms, setCompletedPrograms] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [selectedProgram, setSelectedProgram] = useState(null);\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [animatedLines, setAnimatedLines] = useState(new Map()); // Map pour les animations de lignes\r\n  \r\n  // Mode Admin - emails autorisés (actuellement désactivé)\r\n  const ADMIN_EMAILS = []; // Vide pour désactiver le mode admin\r\n  const isAdmin = user?.email && ADMIN_EMAILS.includes(user.email);\r\n  const [userStats, setUserStats] = useState({\r\n    totalCompleted: 0,\r\n    totalXP: 0,\r\n    currentTier: 0\r\n  });\r\n\r\n  // Récupère la catégorie Street Workout\r\n  const streetCategory = programs.categories.find(cat => cat.id === 'street');\r\n  const streetPrograms = streetCategory?.programs || [];\r\n\r\n  // Charge les données utilisateur\r\n  const loadUserData = useCallback(async () => {\r\n    if (!userId) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Charge les progrès utilisateur\r\n      const progressQuery = query(\r\n        collection(db, 'userProgress'),\r\n        where('userId', '==', userId)\r\n      );\r\n      const progressSnapshot = await getDocs(progressQuery);\r\n      const progressData = {};\r\n      progressSnapshot.forEach(doc => {\r\n        const data = doc.data();\r\n        progressData[data.programId] = data;\r\n      });\r\n      setUserProgress(progressData);\r\n\r\n      // Charge les programmes complétés\r\n      const userDoc = await getDoc(doc(db, 'users', userId));\r\n      const userData = userDoc.data();\r\n      const completed = userData?.completedPrograms || [];\r\n      setCompletedPrograms(completed);\r\n\r\n      // Calcule les statistiques\r\n      const totalCompleted = completed.length;\r\n      const totalXP = completed.reduce((sum, programId) => {\r\n        const program = streetPrograms.find(p => p.id === programId);\r\n        return sum + (program?.xpReward || 0);\r\n      }, 0);\r\n\r\n      // Calcule le tier actuel (le plus haut tier débloqué)\r\n      let currentTier = 0;\r\n      streetPrograms.forEach(program => {\r\n        const isUnlocked = program.prerequisites.length === 0 || \r\n          program.prerequisites.every(prereq => completed.includes(prereq));\r\n        if (isUnlocked && program.position.tier > currentTier) {\r\n          currentTier = program.position.tier;\r\n        }\r\n      });\r\n\r\n      setUserStats({\r\n        totalCompleted,\r\n        totalXP,\r\n        currentTier\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des données:', error);\r\n      Alert.alert('Erreur', 'Impossible de charger vos progrès');\r\n    } finally {\r\n      setLoading(false);\r\n      setDataLoaded(true);\r\n    }\r\n  }, [userId]);\r\n\r\n  useEffect(() => {\r\n    if (userId && !dataLoaded) {\r\n      loadUserData();\r\n    }\r\n  }, [userId]);\r\n\r\n  // Détermine l'état d'un programme\r\n  const getProgramState = useCallback((program) => {\r\n    const isCompleted = completedPrograms.includes(program.id);\r\n    const isUnlocked = program.prerequisites.length === 0 || \r\n      program.prerequisites.every(prereq => completedPrograms.includes(prereq));\r\n    const progress = userProgress[program.id];\r\n    const hasProgress = progress && progress.currentLevel > 0;\r\n\r\n    // MODE ADMIN : Tout est débloqué !\r\n    if (isAdmin) {\r\n      if (isCompleted) return 'COMPLETED';\r\n      if (hasProgress) return 'IN_PROGRESS';\r\n      return 'UNLOCKED'; // Admin = tout débloqué\r\n    }\r\n\r\n    // Force TOUJOURS \"Fondations Débutant\" comme débloqué (programme de base)\r\n    if (program.id === 'beginner-foundation') {\r\n      if (isCompleted) return 'COMPLETED';\r\n      if (hasProgress) return 'IN_PROGRESS';\r\n      return 'UNLOCKED'; // Toujours débloqué\r\n    }\r\n\r\n    if (isCompleted) return 'COMPLETED';\r\n    if (hasProgress) return 'IN_PROGRESS';\r\n    if (isUnlocked) return 'UNLOCKED';\r\n    return 'LOCKED';\r\n  }, [completedPrograms, userProgress, isAdmin]);\r\n\r\n  // Gère le tap sur un nœud\r\n  const handleNodePress = useCallback((program) => {\r\n    console.log('🔥 CLIC DÉTECTÉ sur:', program.name, 'ID:', program.id);\r\n    \r\n    const state = getProgramState(program);\r\n    const isUnlocked = state === 'UNLOCKED' || state === 'IN_PROGRESS' || state === 'COMPLETED';\r\n    const progress = userProgress[program.id];\r\n    \r\n    console.log('🔥 Clic sur programme:', program.name, 'État:', state, 'Débloqué:', isUnlocked);\r\n    \r\n    // Navigate dans TOUS les cas (locked ou unlocked)\r\n    navigation.navigate('ProgramDetail', {\r\n      program,\r\n      category: streetCategory?.name || 'Street Workout',\r\n      userProgress: progress || null,\r\n      isLocked: !isUnlocked, // NOUVEAU : passe l'info locked/unlocked\r\n      programState: state,\r\n      completedPrograms,\r\n      allPrograms: streetPrograms\r\n    });\r\n  }, [getProgramState, completedPrograms, streetPrograms, navigation, streetCategory, userProgress]);\r\n\r\n  // Gère le long press sur un nœud\r\n  const handleNodeLongPress = useCallback((program) => {\r\n    setSelectedProgram(program);\r\n    setModalVisible(true);\r\n  }, []);\r\n\r\n  // Obtient les programmes prérequis avec leurs statuts\r\n  const getPrerequisitesWithStatus = useCallback((program) => {\r\n    return program.prerequisites.map(prereqId => {\r\n      const prereqProgram = streetPrograms.find(p => p.id === prereqId);\r\n      const isCompleted = completedPrograms.includes(prereqId);\r\n      return {\r\n        id: prereqId,\r\n        name: prereqProgram?.name || prereqId,\r\n        completed: isCompleted\r\n      };\r\n    });\r\n  }, [streetPrograms, completedPrograms]);\r\n\r\n  // Obtient les programmes que ce programme débloque\r\n  const getUnlockedPrograms = useCallback((program) => {\r\n    return program.unlocks?.map(unlockedId => {\r\n      const unlockedProgram = streetPrograms.find(p => p.id === unlockedId);\r\n      return {\r\n        id: unlockedId,\r\n        name: unlockedProgram?.name || unlockedId\r\n      };\r\n    }) || [];\r\n  }, [streetPrograms]);\r\n\r\n  // Ferme la modal\r\n  const closeModal = useCallback(() => {\r\n    setModalVisible(false);\r\n    setSelectedProgram(null);\r\n  }, []);\r\n\r\n  // Navigate vers les détails depuis la modal\r\n  const navigateToDetailsFromModal = useCallback(() => {\r\n    if (selectedProgram) {\r\n      closeModal();\r\n      handleNodePress(selectedProgram);\r\n    }\r\n  }, [selectedProgram, closeModal, handleNodePress]);\r\n\r\n  // Fonction pour animer une ligne quand elle se débloque\r\n  const animateLineUnlock = useCallback((lineId) => {\r\n    const animValue = new Animated.Value(0.15);\r\n    setAnimatedLines(prev => new Map(prev.set(lineId, animValue)));\r\n    \r\n    Animated.timing(animValue, {\r\n      toValue: 0.8,\r\n      duration: 500,\r\n      useNativeDriver: false,\r\n    }).start();\r\n  }, []);\r\n\r\n  // Détecte les changements d'état des programmes pour animer les lignes\r\n  useEffect(() => {\r\n    streetPrograms.forEach((program) => {\r\n      if (program.unlocks && program.unlocks.length > 0) {\r\n        program.unlocks.forEach(unlockedId => {\r\n          const unlockedProgram = streetPrograms.find(p => p.id === unlockedId);\r\n          if (unlockedProgram) {\r\n            const toState = getProgramState(unlockedProgram);\r\n            const lineId = `${program.id}-${unlockedId}`;\r\n            \r\n            // Si le programme vient de se débloquer et qu'on n'a pas encore animé cette ligne\r\n            if ((toState === 'UNLOCKED' || toState === 'IN_PROGRESS' || toState === 'COMPLETED') && \r\n                !animatedLines.has(lineId)) {\r\n              animateLineUnlock(lineId);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }, [completedPrograms, userProgress, animateLineUnlock, streetPrograms, getProgramState, animatedLines]);\r\n\r\n  // Calcul précis des positions de lignes avec compensation des marges SkillNode\r\n  const calculateConnectionLine = useCallback((fromProgram, toProgram) => {\r\n    // Position du container SkillNode (avec width: 100 et margin: 8)\r\n    const SKILLNODE_MARGIN = 8;\r\n    const SKILLNODE_CONTAINER_WIDTH = 100;\r\n    \r\n    // Position de base de chaque container SkillNode\r\n    const fromContainerX = fromProgram.position.x * COLUMN_WIDTH + (COLUMN_WIDTH - SKILLNODE_CONTAINER_WIDTH) / 2 + PADDING;\r\n    const fromContainerY = fromProgram.position.y * ROW_HEIGHT + (ROW_HEIGHT - NODE_SIZE) / 2 + PADDING;\r\n    const toContainerX = toProgram.position.x * COLUMN_WIDTH + (COLUMN_WIDTH - SKILLNODE_CONTAINER_WIDTH) / 2 + PADDING;\r\n    const toContainerY = toProgram.position.y * ROW_HEIGHT + (ROW_HEIGHT - NODE_SIZE) / 2 + PADDING;\r\n    \r\n    // Centre du nœud circulaire (80x80) dans le container (100 width)\r\n    // Le nœud est centré dans son container, donc offset de (100-80)/2 = 10px\r\n    // Ajustement de quelques pixels vers la droite pour un alignement parfait\r\n    const nodeOffset = (SKILLNODE_CONTAINER_WIDTH - NODE_SIZE) / 2 + 5; // +5px vers la droite\r\n    \r\n    const fromCenterX = fromContainerX + nodeOffset + NODE_SIZE / 2;\r\n    const fromCenterY = fromContainerY + SKILLNODE_MARGIN + NODE_SIZE / 2;\r\n    const toCenterX = toContainerX + nodeOffset + NODE_SIZE / 2;\r\n    const toCenterY = toContainerY + SKILLNODE_MARGIN + NODE_SIZE / 2;\r\n\r\n    // Calcul de la ligne\r\n    const deltaX = toCenterX - fromCenterX;\r\n    const deltaY = toCenterY - fromCenterY;\r\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n    const angle = Math.atan2(deltaY, deltaX) * (180 / Math.PI);\r\n\r\n    return {\r\n      position: 'absolute',\r\n      left: fromCenterX,\r\n      top: fromCenterY - 1.5, // Centrer la ligne verticalement\r\n      width: distance,\r\n      backgroundColor: 'transparent', // Sera défini dans le rendu\r\n      transform: `rotate(${angle}deg)`,\r\n      transformOrigin: '0 50%',\r\n      // Z-index sera défini dans renderConnections\r\n    };\r\n  }, []);\r\n\r\n  // Rend les connexions entre les nœuds avec styles améliorés\r\n  const renderConnections = useCallback(() => {\r\n    const connections = [];\r\n\r\n    streetPrograms.forEach((program, index) => {\r\n      if (program.unlocks && program.unlocks.length > 0) {\r\n        program.unlocks.forEach(unlockedId => {\r\n          const unlockedProgram = streetPrograms.find(p => p.id === unlockedId);\r\n          if (unlockedProgram) {\r\n            const lineStyle = calculateConnectionLine(program, unlockedProgram);\r\n            const fromState = getProgramState(program);\r\n            const toState = getProgramState(unlockedProgram);\r\n            \r\n            // Détermine si la ligne mène à un nœud débloqué\r\n            const isUnlocked = toState === 'UNLOCKED' || toState === 'IN_PROGRESS' || toState === 'COMPLETED';\r\n            \r\n            let lineColor, opacity, height, shadowColor;\r\n            \r\n            if (isUnlocked) {\r\n              // Lignes vers nœuds UNLOCKED : couleur du programme source\r\n              lineColor = program.color || colors.primary;\r\n              opacity = 0.8;\r\n              height = 3;\r\n              shadowColor = program.color || colors.primary;\r\n            } else {\r\n              // Lignes vers nœuds LOCKED\r\n              lineColor = '#333333';\r\n              opacity = 0.15;\r\n              height = 2;\r\n              shadowColor = 'transparent';\r\n            }\r\n\r\n            // Pour les lignes locked, simuler le style dashed\r\n            if (!isUnlocked) {\r\n              // Ligne dashed simulée avec plusieurs segments\r\n              const segmentLength = 6; // Longueur de chaque segment\r\n              const gapLength = 4; // Longueur de chaque gap\r\n              const totalSegmentLength = segmentLength + gapLength;\r\n              const segmentCount = Math.floor(lineStyle.width / totalSegmentLength);\r\n              \r\n              for (let i = 0; i < segmentCount; i++) {\r\n                connections.push(\r\n                  <View\r\n                    key={`${program.id}-${unlockedId}-dash-${i}`}\r\n                    style={[\r\n                      lineStyle,\r\n                      {\r\n                        left: lineStyle.left + (i * totalSegmentLength),\r\n                        width: segmentLength,\r\n                        height: height,\r\n                        backgroundColor: lineColor,\r\n                        opacity: opacity,\r\n                        zIndex: 1,\r\n                        borderRadius: 1,\r\n                      }\r\n                    ]}\r\n                  />\r\n                );\r\n              }\r\n            } else {\r\n              // Ligne normale pour les connexions unlocked avec glow et animation\r\n              const lineId = `${program.id}-${unlockedId}`;\r\n              const animatedOpacity = animatedLines.get(lineId);\r\n              \r\n              if (animatedOpacity) {\r\n                // Ligne animée\r\n                connections.push(\r\n                  <Animated.View\r\n                    key={lineId}\r\n                    style={[\r\n                      lineStyle,\r\n                      {\r\n                        height: height,\r\n                        backgroundColor: lineColor,\r\n                        opacity: animatedOpacity,\r\n                        zIndex: 1,\r\n                        borderRadius: 1.5,\r\n                        shadowColor: shadowColor,\r\n                        shadowOffset: { width: 0, height: 0 },\r\n                        shadowOpacity: 0.6,\r\n                        shadowRadius: 4,\r\n                        elevation: 2,\r\n                      }\r\n                    ]}\r\n                  />\r\n                );\r\n              } else {\r\n                // Ligne statique\r\n                connections.push(\r\n                  <View\r\n                    key={lineId}\r\n                    style={[\r\n                      lineStyle,\r\n                      {\r\n                        height: height,\r\n                        backgroundColor: lineColor,\r\n                        opacity: opacity,\r\n                        zIndex: 1,\r\n                        borderRadius: 1.5,\r\n                        shadowColor: shadowColor,\r\n                        shadowOffset: { width: 0, height: 0 },\r\n                        shadowOpacity: 0.6,\r\n                        shadowRadius: 4,\r\n                        elevation: 2,\r\n                      }\r\n                    ]}\r\n                  />\r\n                );\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    return connections;\r\n  }, [streetPrograms, calculateConnectionLine, getProgramState]);\r\n\r\n  // Modal de détails avec React Native Paper\r\n  const renderModal = () => {\r\n    if (!selectedProgram) return null;\r\n\r\n    const programState = getProgramState(selectedProgram);\r\n    const prerequisites = getPrerequisitesWithStatus(selectedProgram);\r\n    const unlockedPrograms = getUnlockedPrograms(selectedProgram);\r\n\r\n    return (\r\n      <Portal>\r\n        <Modal \r\n          visible={modalVisible} \r\n          onDismiss={closeModal}\r\n          contentContainerStyle={[\r\n            styles.modalContainer,\r\n            { borderColor: selectedProgram.color }\r\n          ]}\r\n        >\r\n          {/* Header avec icône du programme */}\r\n          <View style={styles.modalHeader}>\r\n            <Text style={styles.modalIcon}>{selectedProgram.icon}</Text>\r\n            <IconButton \r\n              icon=\"close\" \r\n              size={24} \r\n              onPress={closeModal}\r\n              style={styles.modalCloseButton}\r\n            />\r\n          </View>\r\n\r\n          {/* Titre et infos principales */}\r\n          <View style={styles.modalTitleSection}>\r\n            <Text style={styles.modalTitle}>{selectedProgram.name}</Text>\r\n            <Badge \r\n              style={[styles.difficultyBadge, { backgroundColor: selectedProgram.color }]}\r\n            >\r\n              {selectedProgram.difficulty}\r\n            </Badge>\r\n          </View>\r\n\r\n          <Text style={styles.modalDescription}>\r\n            {selectedProgram.description}\r\n          </Text>\r\n\r\n          <Divider style={styles.modalDivider} />\r\n\r\n          {/* Informations du programme */}\r\n          <View style={styles.modalInfoSection}>\r\n            <Text style={styles.modalSectionTitle}>📊 Informations</Text>\r\n            <View style={styles.modalInfoGrid}>\r\n              <View style={styles.modalInfoItem}>\r\n                <Text style={styles.modalInfoLabel}>Durée</Text>\r\n                <Text style={styles.modalInfoValue}>{selectedProgram.totalWeeks} semaines</Text>\r\n              </View>\r\n              <View style={styles.modalInfoItem}>\r\n                <Text style={styles.modalInfoLabel}>XP Reward</Text>\r\n                <Text style={styles.modalInfoValue}>{selectedProgram.xpReward} XP</Text>\r\n              </View>\r\n            </View>\r\n          </View>\r\n\r\n          <Divider style={styles.modalDivider} />\r\n\r\n          {/* Prérequis avec statuts */}\r\n          {prerequisites.length > 0 && (\r\n            <View style={styles.modalSection}>\r\n              <Text style={styles.modalSectionTitle}>🔒 Prérequis</Text>\r\n              {prerequisites.map(prereq => (\r\n                <View key={prereq.id} style={styles.modalPrereqItem}>\r\n                  <Text style={styles.modalPrereqText}>• {prereq.name}</Text>\r\n                  <Badge \r\n                    style={[\r\n                      styles.modalPrereqBadge,\r\n                      { backgroundColor: prereq.completed ? colors.success : colors.error }\r\n                    ]}\r\n                  >\r\n                    {prereq.completed ? '✓' : '✗'}\r\n                  </Badge>\r\n                </View>\r\n              ))}\r\n            </View>\r\n          )}\r\n\r\n          {/* Programmes débloqués */}\r\n          {unlockedPrograms.length > 0 && (\r\n            <View style={styles.modalSection}>\r\n              <Text style={styles.modalSectionTitle}>🔓 Débloque</Text>\r\n              {unlockedPrograms.map(program => (\r\n                <Text key={program.id} style={styles.modalUnlockText}>\r\n                  • {program.name}\r\n                </Text>\r\n              ))}\r\n            </View>\r\n          )}\r\n\r\n          {/* Bouton d'action */}\r\n          <View style={styles.modalActions}>\r\n            <Button\r\n              mode=\"contained\"\r\n              onPress={navigateToDetailsFromModal}\r\n              style={[styles.modalButton, { backgroundColor: selectedProgram.color }]}\r\n              labelStyle={styles.modalButtonText}\r\n            >\r\n              Voir les détails\r\n            </Button>\r\n          </View>\r\n\r\n        </Modal>\r\n      </Portal>\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View style={styles.loadingContainer}>\r\n        <ActivityIndicator size=\"large\" color={colors.primary} />\r\n        <Text style={styles.loadingText}>Chargement de votre arbre...</Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      {/* Header */}\r\n      <View style={styles.header}>\r\n        <Text style={styles.headerTitle}>🏋️ Street Workout</Text>\r\n        <View style={styles.statsContainer}>\r\n          <Text style={styles.statsText}>\r\n            {userStats.totalCompleted}/{streetPrograms.length} • {userStats.totalXP} XP • Tier {userStats.currentTier}\r\n          </Text>\r\n        </View>\r\n      </View>\r\n\r\n      {/* Badge Admin */}\r\n      {isAdmin && (\r\n        <View style={styles.adminBadge}>\r\n          <Text style={styles.adminText}>👑 MODE ADMIN - Tous les programmes débloqués</Text>\r\n        </View>\r\n      )}\r\n\r\n      {/* Arbre de compétences */}\r\n      <ScrollView\r\n        horizontal\r\n        showsHorizontalScrollIndicator={false}\r\n        contentContainerStyle={{ minWidth: TREE_WIDTH + PADDING * 2 }}\r\n        style={styles.horizontalScroll}\r\n      >\r\n        <ScrollView\r\n          showsVerticalScrollIndicator={false}\r\n          contentContainerStyle={{ minHeight: TREE_HEIGHT + PADDING * 2, paddingHorizontal: PADDING, paddingVertical: PADDING }}\r\n          style={styles.verticalScroll}\r\n        >\r\n          <View style={styles.treeContainer}>\r\n            {/* Connexions */}\r\n            {renderConnections()}\r\n\r\n            {/* Nœuds */}\r\n            {streetPrograms.map(program => {\r\n              let state = getProgramState(program);\r\n              const progress = userProgress[program.id];\r\n              \r\n              // Force UNLOCKED pour Fondations Débutant au niveau du rendu\r\n              if (program.id === 'beginner-foundation') {\r\n                state = progress && progress.currentLevel > 0 ? 'IN_PROGRESS' : \r\n                        completedPrograms.includes(program.id) ? 'COMPLETED' : 'UNLOCKED';\r\n              }\r\n              \r\n              return (\r\n                <View\r\n                  key={program.id}\r\n                  style={[\r\n                    styles.nodeContainer,\r\n                    {\r\n                      left: program.position.x * COLUMN_WIDTH + (COLUMN_WIDTH - 100) / 2 + PADDING, // 100 = SKILLNODE_CONTAINER_WIDTH\r\n                      top: program.position.y * ROW_HEIGHT + (ROW_HEIGHT - NODE_SIZE) / 2 + PADDING\r\n                    }\r\n                  ]}\r\n                >\r\n                  <SkillNode\r\n                    program={program}\r\n                    state={state}\r\n                    progress={progress}\r\n                    onPress={() => handleNodePress(program)}\r\n                    onLongPress={() => handleNodeLongPress(program)}\r\n                  />\r\n                </View>\r\n              );\r\n            })}\r\n          </View>\r\n        </ScrollView>\r\n      </ScrollView>\r\n\r\n      {/* Légende */}\r\n      <View style={styles.legend}>\r\n        <View style={styles.legendRow}>\r\n          <Text style={styles.legendItem}>🔒 Verrouillé</Text>\r\n          <Text style={styles.legendItem}>🟢 Disponible</Text>\r\n        </View>\r\n        <View style={styles.legendRow}>\r\n          <Text style={styles.legendItem}>🟡 En cours</Text>\r\n          <Text style={styles.legendItem}>✅ Complété</Text>\r\n        </View>\r\n      </View>\r\n\r\n      {/* Modal */}\r\n      {renderModal()}\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: colors.background\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: colors.background\r\n  },\r\n  loadingText: {\r\n    color: colors.textPrimary,\r\n    marginTop: 16,\r\n    fontSize: 16\r\n  },\r\n  header: {\r\n    padding: 16,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: colors.border\r\n  },\r\n  headerTitle: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    color: colors.textPrimary,\r\n    textAlign: 'center',\r\n    marginBottom: 8\r\n  },\r\n  statsContainer: {\r\n    alignItems: 'center'\r\n  },\r\n  statsText: {\r\n    fontSize: 14,\r\n    color: colors.textSecondary\r\n  },\r\n  horizontalScroll: {\r\n    flex: 1\r\n  },\r\n  verticalScroll: {\r\n    flex: 1\r\n  },\r\n  treeContainer: {\r\n    width: TREE_WIDTH,\r\n    height: TREE_HEIGHT,\r\n    position: 'relative'\r\n  },\r\n  nodeContainer: {\r\n    position: 'absolute',\r\n    width: NODE_SIZE,\r\n    height: NODE_SIZE,\r\n    zIndex: 10 // Au-dessus des lignes\r\n  },\r\n  connectionLine: {\r\n    position: 'absolute',\r\n    height: 4,\r\n    borderRadius: 2,\r\n    zIndex: 1,\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 1 },\r\n    shadowOpacity: 0.4,\r\n    shadowRadius: 3,\r\n    elevation: 3,\r\n    borderWidth: 0.5,\r\n    borderColor: 'rgba(255, 255, 255, 0.1)'\r\n  },\r\n  legend: {\r\n    padding: 16,\r\n    borderTopWidth: 1,\r\n    borderTopColor: colors.border,\r\n    backgroundColor: colors.surface\r\n  },\r\n  legendRow: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    marginBottom: 4\r\n  },\r\n  legendItem: {\r\n    fontSize: 12,\r\n    color: colors.textSecondary\r\n  },\r\n  adminBadge: {\r\n    backgroundColor: colors.success,\r\n    marginHorizontal: 16,\r\n    marginVertical: 8,\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 16,\r\n    borderRadius: 20,\r\n    alignItems: 'center',\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 4,\r\n    elevation: 5\r\n  },\r\n  adminText: {\r\n    color: 'white',\r\n    fontSize: 14,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center'\r\n  },\r\n  // Styles pour la nouvelle modal Paper\r\n  modalContainer: {\r\n    backgroundColor: colors.surface,\r\n    margin: 20,\r\n    borderRadius: 16,\r\n    padding: 24,\r\n    maxHeight: screenHeight * 0.8,\r\n    borderWidth: 2,\r\n  },\r\n  modalHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 16,\r\n  },\r\n  modalIcon: {\r\n    fontSize: 48,\r\n    textAlign: 'center',\r\n  },\r\n  modalCloseButton: {\r\n    margin: 0,\r\n    padding: 0,\r\n  },\r\n  modalTitleSection: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    marginBottom: 12,\r\n  },\r\n  modalTitle: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    color: colors.text,\r\n    flex: 1,\r\n  },\r\n  difficultyBadge: {\r\n    marginLeft: 12,\r\n  },\r\n  modalDescription: {\r\n    fontSize: 16,\r\n    color: colors.textSecondary,\r\n    lineHeight: 22,\r\n    marginBottom: 16,\r\n  },\r\n  modalDivider: {\r\n    marginVertical: 16,\r\n  },\r\n  modalInfoSection: {\r\n    marginBottom: 8,\r\n  },\r\n  modalSectionTitle: {\r\n    fontSize: 18,\r\n    fontWeight: '600',\r\n    color: colors.text,\r\n    marginBottom: 12,\r\n  },\r\n  modalInfoGrid: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n  },\r\n  modalInfoItem: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n  },\r\n  modalInfoLabel: {\r\n    fontSize: 14,\r\n    color: colors.textSecondary,\r\n    marginBottom: 4,\r\n  },\r\n  modalInfoValue: {\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n    color: colors.text,\r\n  },\r\n  modalSection: {\r\n    marginBottom: 16,\r\n  },\r\n  modalPrereqItem: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 8,\r\n  },\r\n  modalPrereqText: {\r\n    fontSize: 16,\r\n    color: colors.text,\r\n    flex: 1,\r\n  },\r\n  modalPrereqBadge: {\r\n    marginLeft: 12,\r\n    minWidth: 24,\r\n  },\r\n  modalUnlockText: {\r\n    fontSize: 16,\r\n    color: colors.text,\r\n    marginBottom: 4,\r\n  },\r\n  modalActions: {\r\n    marginTop: 8,\r\n  },\r\n  modalButton: {\r\n    borderRadius: 8,\r\n  },\r\n  modalButtonText: {\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n  }\r\n});\r\n\r\nexport default SkillTreeScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}