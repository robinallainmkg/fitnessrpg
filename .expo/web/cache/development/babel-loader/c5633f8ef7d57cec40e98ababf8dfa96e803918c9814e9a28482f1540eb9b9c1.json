{"ast":null,"code":"import color from 'color';\nimport { black, white } from '../../styles/themes/v2/colors';\nconst getBorderColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  selectedColor,\n  backgroundColor\n}) => {\n  const isSelectedColor = selectedColor !== undefined;\n  if (theme.isV3) {\n    if (!isOutlined) {\n      return 'transparent';\n    }\n    if (disabled) {\n      return color(theme.colors.onSurfaceVariant).alpha(0.12).rgb().string();\n    }\n    if (isSelectedColor) {\n      return color(selectedColor).alpha(0.29).rgb().string();\n    }\n    return theme.colors.outline;\n  }\n  if (isOutlined) {\n    if (isSelectedColor) {\n      return color(selectedColor).alpha(0.29).rgb().string();\n    }\n    if (theme.dark) {\n      return color(white).alpha(0.29).rgb().string();\n    }\n    return color(black).alpha(0.29).rgb().string();\n  }\n  return backgroundColor;\n};\nconst getTextColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  selectedColor\n}) => {\n  const isSelectedColor = selectedColor !== undefined;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    if (isSelectedColor) {\n      return selectedColor;\n    }\n    if (isOutlined) {\n      return theme.colors.onSurfaceVariant;\n    }\n    return theme.colors.onSecondaryContainer;\n  }\n  if (disabled) {\n    return theme.colors.disabled;\n  }\n  if (isSelectedColor) {\n    return color(selectedColor).alpha(0.87).rgb().string();\n  }\n  return color(theme.colors.text).alpha(0.87).rgb().string();\n};\nconst getDefaultBackgroundColor = ({\n  theme,\n  isOutlined\n}) => {\n  if (theme.isV3) {\n    if (isOutlined) {\n      return theme.colors.surface;\n    }\n    return theme.colors.secondaryContainer;\n  }\n  if (isOutlined) {\n    var _theme$colors;\n    return (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.surface;\n  }\n  if (theme.dark) {\n    return '#383838';\n  }\n  return '#ebebeb';\n};\nconst getBackgroundColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  customBackgroundColor\n}) => {\n  if (typeof customBackgroundColor === 'string') {\n    return customBackgroundColor;\n  }\n  if (theme.isV3) {\n    if (disabled) {\n      if (isOutlined) {\n        return 'transparent';\n      }\n      return color(theme.colors.onSurfaceVariant).alpha(0.12).rgb().string();\n    }\n  }\n  return getDefaultBackgroundColor({\n    theme,\n    isOutlined\n  });\n};\nconst getSelectedBackgroundColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  customBackgroundColor,\n  showSelectedOverlay\n}) => {\n  const backgroundColor = getBackgroundColor({\n    theme,\n    disabled,\n    isOutlined,\n    customBackgroundColor\n  });\n  if (theme.isV3) {\n    if (isOutlined) {\n      if (showSelectedOverlay) {\n        return color(backgroundColor).mix(color(theme.colors.onSurfaceVariant), 0.12).rgb().string();\n      }\n      return color(backgroundColor).mix(color(theme.colors.onSurfaceVariant), 0).rgb().string();\n    }\n    if (showSelectedOverlay) {\n      return color(backgroundColor).mix(color(theme.colors.onSecondaryContainer), 0.12).rgb().string();\n    }\n    return color(backgroundColor).mix(color(theme.colors.onSecondaryContainer), 0).rgb().string();\n  }\n  if (theme.dark) {\n    if (isOutlined) {\n      return color(backgroundColor).lighten(0.2).rgb().string();\n    }\n    return color(backgroundColor).lighten(0.4).rgb().string();\n  }\n  if (isOutlined) {\n    return color(backgroundColor).darken(0.08).rgb().string();\n  }\n  return color(backgroundColor).darken(0.2).rgb().string();\n};\nconst getIconColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  selectedColor\n}) => {\n  const isSelectedColor = selectedColor !== undefined;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    if (isSelectedColor) {\n      return selectedColor;\n    }\n    if (isOutlined) {\n      return theme.colors.onSurfaceVariant;\n    }\n    return theme.colors.onSecondaryContainer;\n  }\n  if (disabled) {\n    return theme.colors.disabled;\n  }\n  if (isSelectedColor) {\n    return color(selectedColor).alpha(0.54).rgb().string();\n  }\n  return color(theme.colors.text).alpha(0.54).rgb().string();\n};\nconst getRippleColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  selectedColor,\n  selectedBackgroundColor,\n  customRippleColor\n}) => {\n  if (customRippleColor) {\n    return customRippleColor;\n  }\n  const isSelectedColor = selectedColor !== undefined;\n  const textColor = getTextColor({\n    theme,\n    disabled,\n    selectedColor,\n    isOutlined\n  });\n  if (theme.isV3) {\n    if (isSelectedColor) {\n      return color(selectedColor).alpha(0.12).rgb().string();\n    }\n    return color(textColor).alpha(0.12).rgb().string();\n  }\n  if (isSelectedColor) {\n    return color(selectedColor).fade(0.5).rgb().string();\n  }\n  return selectedBackgroundColor;\n};\nexport const getChipColors = ({\n  isOutlined,\n  theme,\n  selectedColor,\n  showSelectedOverlay,\n  customBackgroundColor,\n  disabled,\n  customRippleColor\n}) => {\n  const baseChipColorProps = {\n    theme,\n    isOutlined,\n    disabled\n  };\n  const backgroundColor = getBackgroundColor(Object.assign({}, baseChipColorProps, {\n    customBackgroundColor\n  }));\n  const selectedBackgroundColor = getSelectedBackgroundColor(Object.assign({}, baseChipColorProps, {\n    customBackgroundColor,\n    showSelectedOverlay\n  }));\n  return {\n    borderColor: getBorderColor(Object.assign({}, baseChipColorProps, {\n      selectedColor,\n      backgroundColor\n    })),\n    textColor: getTextColor(Object.assign({}, baseChipColorProps, {\n      selectedColor\n    })),\n    iconColor: getIconColor(Object.assign({}, baseChipColorProps, {\n      selectedColor\n    })),\n    rippleColor: getRippleColor(Object.assign({}, baseChipColorProps, {\n      selectedColor,\n      selectedBackgroundColor,\n      customRippleColor\n    })),\n    backgroundColor,\n    selectedBackgroundColor\n  };\n};","map":{"version":3,"names":["color","black","white","getBorderColor","theme","isOutlined","disabled","selectedColor","backgroundColor","isSelectedColor","undefined","isV3","colors","onSurfaceVariant","alpha","rgb","string","outline","dark","getTextColor","onSurfaceDisabled","onSecondaryContainer","text","getDefaultBackgroundColor","surface","secondaryContainer","_theme$colors","getBackgroundColor","customBackgroundColor","getSelectedBackgroundColor","showSelectedOverlay","mix","lighten","darken","getIconColor","getRippleColor","selectedBackgroundColor","customRippleColor","textColor","fade","getChipColors","baseChipColorProps","Object","assign","borderColor","iconColor","rippleColor"],"sources":["C:\\Users\\robin\\Documents\\RpgHybrid\\node_modules\\react-native-paper\\src\\components\\Chip\\helpers.tsx"],"sourcesContent":["import type { ColorValue, StyleProp, ViewStyle } from 'react-native';\n\nimport color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\nexport type ChipAvatarProps = {\n  style?: StyleProp<ViewStyle>;\n};\n\ntype BaseProps = {\n  theme: InternalTheme;\n  isOutlined: boolean;\n  disabled?: boolean;\n};\n\nconst getBorderColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  selectedColor,\n  backgroundColor,\n}: BaseProps & { backgroundColor: string; selectedColor?: string }) => {\n  const isSelectedColor = selectedColor !== undefined;\n\n  if (theme.isV3) {\n    if (!isOutlined) {\n      // If the Chip mode is \"flat\", set border color to transparent\n      return 'transparent';\n    }\n\n    if (disabled) {\n      return color(theme.colors.onSurfaceVariant).alpha(0.12).rgb().string();\n    }\n\n    if (isSelectedColor) {\n      return color(selectedColor).alpha(0.29).rgb().string();\n    }\n\n    return theme.colors.outline;\n  }\n\n  if (isOutlined) {\n    if (isSelectedColor) {\n      return color(selectedColor).alpha(0.29).rgb().string();\n    }\n\n    if (theme.dark) {\n      return color(white).alpha(0.29).rgb().string();\n    }\n\n    return color(black).alpha(0.29).rgb().string();\n  }\n\n  return backgroundColor;\n};\n\nconst getTextColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  selectedColor,\n}: BaseProps & {\n  selectedColor?: string;\n}) => {\n  const isSelectedColor = selectedColor !== undefined;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (isSelectedColor) {\n      return selectedColor;\n    }\n\n    if (isOutlined) {\n      return theme.colors.onSurfaceVariant;\n    }\n\n    return theme.colors.onSecondaryContainer;\n  }\n\n  if (disabled) {\n    return theme.colors.disabled;\n  }\n\n  if (isSelectedColor) {\n    return color(selectedColor).alpha(0.87).rgb().string();\n  }\n\n  return color(theme.colors.text).alpha(0.87).rgb().string();\n};\n\nconst getDefaultBackgroundColor = ({\n  theme,\n  isOutlined,\n}: Omit<BaseProps, 'disabled' | 'selectedColor'>) => {\n  if (theme.isV3) {\n    if (isOutlined) {\n      return theme.colors.surface;\n    }\n\n    return theme.colors.secondaryContainer;\n  }\n\n  if (isOutlined) {\n    return theme.colors?.surface;\n  }\n\n  if (theme.dark) {\n    return '#383838';\n  }\n\n  return '#ebebeb';\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  customBackgroundColor,\n}: BaseProps & {\n  customBackgroundColor?: ColorValue;\n}) => {\n  if (typeof customBackgroundColor === 'string') {\n    return customBackgroundColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isOutlined) {\n        return 'transparent';\n      }\n      return color(theme.colors.onSurfaceVariant).alpha(0.12).rgb().string();\n    }\n  }\n\n  return getDefaultBackgroundColor({ theme, isOutlined });\n};\n\nconst getSelectedBackgroundColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  customBackgroundColor,\n  showSelectedOverlay,\n}: BaseProps & {\n  customBackgroundColor?: ColorValue;\n  showSelectedOverlay?: boolean;\n}) => {\n  const backgroundColor = getBackgroundColor({\n    theme,\n    disabled,\n    isOutlined,\n    customBackgroundColor,\n  });\n\n  if (theme.isV3) {\n    if (isOutlined) {\n      if (showSelectedOverlay) {\n        return color(backgroundColor)\n          .mix(color(theme.colors.onSurfaceVariant), 0.12)\n          .rgb()\n          .string();\n      }\n      return color(backgroundColor)\n        .mix(color(theme.colors.onSurfaceVariant), 0)\n        .rgb()\n        .string();\n    }\n\n    if (showSelectedOverlay) {\n      return color(backgroundColor)\n        .mix(color(theme.colors.onSecondaryContainer), 0.12)\n        .rgb()\n        .string();\n    }\n\n    return color(backgroundColor)\n      .mix(color(theme.colors.onSecondaryContainer), 0)\n      .rgb()\n      .string();\n  }\n\n  if (theme.dark) {\n    if (isOutlined) {\n      return color(backgroundColor).lighten(0.2).rgb().string();\n    }\n    return color(backgroundColor).lighten(0.4).rgb().string();\n  }\n\n  if (isOutlined) {\n    return color(backgroundColor).darken(0.08).rgb().string();\n  }\n\n  return color(backgroundColor).darken(0.2).rgb().string();\n};\n\nconst getIconColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  selectedColor,\n}: BaseProps & {\n  selectedColor?: string;\n}) => {\n  const isSelectedColor = selectedColor !== undefined;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (isSelectedColor) {\n      return selectedColor;\n    }\n\n    if (isOutlined) {\n      return theme.colors.onSurfaceVariant;\n    }\n\n    return theme.colors.onSecondaryContainer;\n  }\n\n  if (disabled) {\n    return theme.colors.disabled;\n  }\n\n  if (isSelectedColor) {\n    return color(selectedColor).alpha(0.54).rgb().string();\n  }\n\n  return color(theme.colors.text).alpha(0.54).rgb().string();\n};\n\nconst getRippleColor = ({\n  theme,\n  isOutlined,\n  disabled,\n  selectedColor,\n  selectedBackgroundColor,\n  customRippleColor,\n}: BaseProps & {\n  selectedBackgroundColor: string;\n  selectedColor?: string;\n  customRippleColor?: ColorValue;\n}) => {\n  if (customRippleColor) {\n    return customRippleColor;\n  }\n\n  const isSelectedColor = selectedColor !== undefined;\n  const textColor = getTextColor({\n    theme,\n    disabled,\n    selectedColor,\n    isOutlined,\n  });\n\n  if (theme.isV3) {\n    if (isSelectedColor) {\n      return color(selectedColor).alpha(0.12).rgb().string();\n    }\n\n    return color(textColor).alpha(0.12).rgb().string();\n  }\n\n  if (isSelectedColor) {\n    return color(selectedColor).fade(0.5).rgb().string();\n  }\n\n  return selectedBackgroundColor;\n};\n\nexport const getChipColors = ({\n  isOutlined,\n  theme,\n  selectedColor,\n  showSelectedOverlay,\n  customBackgroundColor,\n  disabled,\n  customRippleColor,\n}: BaseProps & {\n  customBackgroundColor?: ColorValue;\n  disabled?: boolean;\n  showSelectedOverlay?: boolean;\n  selectedColor?: string;\n  customRippleColor?: ColorValue;\n}) => {\n  const baseChipColorProps = { theme, isOutlined, disabled };\n\n  const backgroundColor = getBackgroundColor({\n    ...baseChipColorProps,\n    customBackgroundColor,\n  });\n\n  const selectedBackgroundColor = getSelectedBackgroundColor({\n    ...baseChipColorProps,\n    customBackgroundColor,\n    showSelectedOverlay,\n  });\n\n  return {\n    borderColor: getBorderColor({\n      ...baseChipColorProps,\n      selectedColor,\n      backgroundColor,\n    }),\n    textColor: getTextColor({\n      ...baseChipColorProps,\n      selectedColor,\n    }),\n    iconColor: getIconColor({\n      ...baseChipColorProps,\n      selectedColor,\n    }),\n    rippleColor: getRippleColor({\n      ...baseChipColorProps,\n      selectedColor,\n      selectedBackgroundColor,\n      customRippleColor,\n    }),\n    backgroundColor,\n    selectedBackgroundColor,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}