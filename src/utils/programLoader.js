/**
 * Utilitaires pour charger les programmes avec optimisation
 * Permet de charger les m√©tadonn√©es (l√©ger) ou les d√©tails complets selon le besoin
 */

import { loadProgramsMeta, loadCategoryDetails, loadFullProgram } from '../data/programsLoader';
import streetworkoutTree from '../data/programDetails/streetworkout-tree.json';
import run10kTree from '../data/programDetails/run10k-tree.json';

// Mapping statique des trees (Metro ne supporte pas les imports dynamiques)
const PROGRAM_TREES = {
  'street': streetworkoutTree,
  'running': run10kTree
};

// Cache en m√©moire pour les d√©tails fusionn√©s
const programCache = {};

/**
 * Charge uniquement la structure de l'arbre (l√©ger)
 * Utilis√© par SkillTreeScreen pour afficher l'arbre sans charger tous les exercices
 * 
 * @param {string} categoryId - ID de la cat√©gorie (ex: 'street', 'running')
 * @returns {Promise<Object|null>} Structure de l'arbre ou null
 */
export const loadProgramTree = async (categoryId) => {
  const cacheKey = `tree/${categoryId}`;
  
  console.log(`üå≥ [loadProgramTree] Chargement arbre pour ${categoryId}`);
  
  if (programCache[cacheKey]) {
    console.log(`üíæ [loadProgramTree] ${categoryId} trouv√© en cache`);
    return programCache[cacheKey];
  }
  
  try {
    // R√©cup√©rer depuis le mapping statique
    const treeData = PROGRAM_TREES[categoryId];
    
    if (!treeData) {
      console.error(`‚ùå [loadProgramTree] Arbre ${categoryId} non trouv√© dans le mapping`);
      return null;
    }
    
    console.log(`‚úÖ [loadProgramTree] Arbre ${categoryId} charg√© (${treeData.tree.length} programmes)`);
    
    programCache[cacheKey] = treeData;
    return treeData;
  } catch (error) {
    console.error(`‚ùå [loadProgramTree] Erreur chargement arbre ${categoryId}:`, error);
    return null;
  }
};

/**
 * Obtient un programme avec ses d√©tails complets (fusionn√©s)
 * Utilise le cache pour √©viter les rechargements
 * 
 * @param {string} categoryId - ID de la cat√©gorie (ex: 'street', 'run')
 * @param {string} programId - ID du programme
 * @returns {Promise<Object|null>} Programme complet ou null
 */
export const getProgramWithDetails = async (categoryId, programId) => {
  const cacheKey = `${categoryId}/${programId}`;
  
  if (programCache[cacheKey]) {
    return programCache[cacheKey];
  }
  
  const program = await loadFullProgram(categoryId, programId);
  if (program) {
    programCache[cacheKey] = program;
  }
  
  return program;
};

/**
 * Obtient une cat√©gorie compl√®te avec tous les d√©tails de ses programmes
 * 
 * @param {string} categoryId - ID de la cat√©gorie
 * @returns {Promise<Object|null>} Cat√©gorie avec programmes complets
 */
export const getCategoryWithDetails = async (categoryId) => {
  const cacheKey = `category/${categoryId}`;
  
  console.log(`üì¶ [getCategoryWithDetails] Demande pour ${categoryId}`);
  
  if (programCache[cacheKey]) {
    console.log(`üíæ [getCategoryWithDetails] ${categoryId} trouv√© en cache`);
    return programCache[cacheKey];
  }
  
  try {
    console.log(`üîç [getCategoryWithDetails] Chargement m√©tadonn√©es pour ${categoryId}...`);
    
    // Charger les m√©tadonn√©es de la cat√©gorie
    const metadata = await loadProgramsMeta();
    const categoryMeta = metadata.categories.find(cat => cat.id === categoryId);
    
    if (!categoryMeta) {
      console.warn(`‚ö†Ô∏è [getCategoryWithDetails] Cat√©gorie ${categoryId} non trouv√©e`);
      return null;
    }
    
    console.log(`‚úÖ [getCategoryWithDetails] M√©tadonn√©es ${categoryId} charg√©es`);
    console.log(`üì• [getCategoryWithDetails] Chargement tree et d√©tails pour ${categoryId}...`);
    
    // Charger l'arbre (structure l√©g√®re)
    const treeData = await loadProgramTree(categoryId);
    if (!treeData || !treeData.tree) {
      console.error(`‚ùå [getCategoryWithDetails] Arbre ${categoryId} non trouv√©`);
      return null;
    }
    
    // Charger tous les d√©tails de cette cat√©gorie
    const details = await loadCategoryDetails(categoryId);
    
    console.log(`‚úÖ [getCategoryWithDetails] D√©tails ${categoryId} charg√©s`);
    console.log(`üìä [getCategoryWithDetails] D√©tails contient ${Object.keys(details).length} programmes`);
    console.log(`üîß [getCategoryWithDetails] Fusion tree + details...`);
    
    // Fusionner tree + details pour tous les programmes
    const programsWithDetails = treeData.tree.map(programMeta => {
      const programDetails = details[programMeta.id];
      return {
        ...programMeta,
        ...programDetails
      };
    });
    
    console.log(`‚úÖ [getCategoryWithDetails] ${programsWithDetails.length} programmes fusionn√©s`);
    
    const fullCategory = {
      ...categoryMeta,
      programs: programsWithDetails
    };
    
    programCache[cacheKey] = fullCategory;
    console.log(`‚úÖ [getCategoryWithDetails] ${categoryId} mis en cache et retourn√©`);
    return fullCategory;
  } catch (error) {
    console.error(`‚ùå [getCategoryWithDetails] Erreur pour ${categoryId}:`, error);
    throw error;
  }
};

/**
 * Pr√©charge les d√©tails d'une cat√©gorie en arri√®re-plan
 * Utile apr√®s le chargement initial pour pr√©parer les donn√©es
 * 
 * @param {string} categoryId - ID de la cat√©gorie √† pr√©charger
 */
export const preloadCategoryDetails = async (categoryId) => {
  try {
    await getCategoryWithDetails(categoryId);
    console.log(`‚úÖ D√©tails pr√©charg√©s pour ${categoryId}`);
  } catch (error) {
    console.warn(`‚ö†Ô∏è √âchec pr√©chargement ${categoryId}:`, error);
  }
};

/**
 * Vide le cache (utile pour les tests ou le rechargement forc√©)
 */
export const clearProgramCache = () => {
  Object.keys(programCache).forEach(key => delete programCache[key]);
  console.log('üóëÔ∏è Cache programmes vid√©');
};

export default {
  loadProgramTree,
  getProgramWithDetails,
  getCategoryWithDetails,
  preloadCategoryDetails,
  clearProgramCache
};
