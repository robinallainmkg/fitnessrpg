import { initializeApp, getApps, getApp } from 'firebase/app';
import { initializeAuth, getReactNativePersistence, getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Configuration Firebase depuis .env
const firebaseConfig = {
  apiKey: process.env.EXPO_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.EXPO_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.EXPO_PUBLIC_FIREBASE_APP_ID,
};

console.log('üî• Firebase Config:', {
  apiKey: firebaseConfig.apiKey ? '‚úÖ D√©fini' : '‚ùå Manquant',
  projectId: firebaseConfig.projectId ? '‚úÖ D√©fini' : '‚ùå Manquant',
  authDomain: firebaseConfig.authDomain ? '‚úÖ D√©fini' : '‚ùå Manquant',
});

// Initialiser l'app Firebase (singleton pattern)
let app;
if (!getApps().length) {
  app = initializeApp(firebaseConfig);
  console.log('‚úÖ Firebase App initialis√©');
} else {
  app = getApp();
  console.log('‚ÑπÔ∏è Firebase App d√©j√† initialis√©, r√©utilisation');
}

// CRITIQUE : Initialiser Auth avec persistence AsyncStorage (singleton pattern)
let auth;
try {
  // Essayer d'initialiser avec persistence en premier
  auth = initializeAuth(app, {
    persistence: getReactNativePersistence(AsyncStorage)
  });
  console.log('‚úÖ Firebase Auth initialis√© avec persistence AsyncStorage');
} catch (error) {
  // Si erreur (d√©j√† initialis√©), r√©cup√©rer l'instance existante
  if (error.code === 'auth/already-initialized') {
    auth = getAuth(app);
    console.log('‚ÑπÔ∏è Firebase Auth d√©j√† initialis√©, r√©utilisation de l\'instance existante');
  } else {
    console.error('‚ùå Erreur critique initialisation Firebase Auth:', error);
    // Dernier recours : essayer getAuth sans persistence
    try {
      auth = getAuth(app);
      console.warn('‚ö†Ô∏è Firebase Auth initialis√© en mode fallback (sans persistence)');
    } catch (fallbackError) {
      console.error('‚ùå Impossible d\'initialiser Firebase Auth:', fallbackError);
      throw fallbackError;
    }
  }
}

// Initialiser Firestore
const db = getFirestore(app);

console.log('üî• Firebase Services initialis√©s');

export { auth, db };
export default app;
