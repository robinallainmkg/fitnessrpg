import React, { useState, useEffect } from 'react';
import {
  View,
  StyleSheet,
  Alert,
  BackHandler,
  ScrollView,
  Modal,
  Platform,
  TouchableOpacity,
  Dimensions
} from 'react-native';
import {
  Text,
  IconButton
} from 'react-native-paper';
import { LinearGradient } from 'expo-linear-gradient';
import { useWorkout } from '../contexts/WorkoutContext';
import Timer from '../components/Timer';
import { colors } from '../theme/colors';

const { width: screenWidth } = Dimensions.get('window');

const WorkoutScreen = ({ route, navigation }) => {
  const { program, level } = route.params;
  const [showDescriptionModal, setShowDescriptionModal] = useState(false);
  const [showAbandonDialog, setShowAbandonDialog] = useState(false);
  
  const {
    workoutData,
    currentExerciseIndex,
    currentSetIndex,
    isResting,
    restTimeRemaining,
    startWorkout,
    recordSet,
    skipRest,
    resetWorkout,
    getCurrentExercise,
    getCurrentSetNumber,
    getProgressPercentage
  } = useWorkout();

  const [reps, setReps] = useState(0);

  useEffect(() => {
    // D√©marrer la s√©ance
    startWorkout(program, level);

    // G√©rer le bouton retour (seulement sur Android)
    let backHandler;
    if (Platform.OS === 'android') {
      backHandler = BackHandler.addEventListener(
        'hardwareBackPress',
        handleBackPress
      );
    }

    return () => {
      if (backHandler) {
        backHandler.remove();
      }
    };
  }, []);

  const handleBackPress = () => {
    Alert.alert(
      'Quitter la s√©ance ?',
      'Votre progression sera perdue si vous quittez maintenant.',
      [
        { text: 'Continuer', style: 'cancel' },
        { 
          text: 'Quitter', 
          style: 'destructive',
          onPress: () => {
            resetWorkout();
            navigation.goBack();
          }
        }
      ]
    );
    return true;
  };

  const handleValidateSet = () => {
    const value = parseInt(inputValue);
    if (isNaN(value) || value < 0) {
      Alert.alert('Erreur', 'Veuillez entrer une valeur valide');
      return;
    }

    recordSet(value);
    setInputValue('');
  };

  const handleSkipRest = () => {
    skipRest();
  };

  const handleTimerComplete = () => {
    // Le timer se charge automatiquement de passer √† l'√©tat suivant
  };

  // √âtat pour la modal d'abandon
  const [showAbandonDialog, setShowAbandonDialog] = useState(false);

  // Fonction pour afficher l'alerte d'abandon
  const showAbandonAlert = () => {
    console.log('üö® showAbandonAlert appel√©');
    setShowAbandonDialog(true);
  };

  // Fonction pour confirmer l'abandon
  const confirmAbandon = () => {
    console.log('‚úÖ Abandon confirm√©');
    setShowAbandonDialog(false);
    handleAbandon();
  };

  // Fonction pour annuler l'abandon
  const cancelAbandon = () => {
    console.log('‚ùå Abandon annul√©');
    setShowAbandonDialog(false);
  };

  // Fonction pour g√©rer l'abandon de la s√©ance
  const handleAbandon = () => {
    console.log('üî• handleAbandon appel√© - D√©but de l\'abandon');
    
    // Reset du contexte workout
    console.log('üîÑ Appel de resetWorkout()');
    resetWorkout();
    
    // Navigation vers l'√©cran d'accueil
    console.log('üè† Navigation vers Home');
    navigation.navigate('Home');
    
    console.log('‚úÖ handleAbandon termin√©');
    
    // TODO: Optionnel - sauvegarder une "incomplete session" dans Firestore
    // avec flag abandoned: true pour les statistiques futures
  };

  // Redirection vers le r√©sum√© quand la s√©ance est termin√©e
  useEffect(() => {
    if (workoutData && currentExerciseIndex >= workoutData.exercises.length) {
      navigation.replace('WorkoutSummary', { 
        program, 
        level, 
        workoutData 
      });
    }
  }, [currentExerciseIndex, workoutData]);

  // Configuration du bouton "Abandonner" dans le header
  useEffect(() => {
    navigation.setOptions({
      headerRight: () => (
        <IconButton
          icon="close-circle-outline"
          iconColor="#F44336"
          size={24}
          style={{ opacity: 0.7 }}
          onPress={showAbandonAlert}
        />
      ),
    });
  }, [navigation]);

  if (!workoutData) {
    return (
      <View style={styles.loadingContainer}>
        <Text>Pr√©paration de votre s√©ance...</Text>
      </View>
    );
  }

  const currentExercise = getCurrentExercise();
  const progress = getProgressPercentage();

  // V√©rification de s√©curit√© : si pas d'exercice actuel, retourner √† l'√©cran pr√©c√©dent
  if (!currentExercise) {
    return (
      <View style={styles.loadingContainer}>
        <Text>Aucun exercice trouv√©...</Text>
        <Button 
          mode="contained" 
          onPress={() => navigation.goBack()}
          style={{ marginTop: 16 }}
        >
          Retour
        </Button>
      </View>
    );
  }

  if (isResting) {
    return (
      <LinearGradient
        colors={['#0F172A', '#1E293B', '#0F172A']}
        style={styles.container}
      >
        {/* Header avec progression */}
        <LinearGradient
          colors={['#7B61FF', '#4D9EFF']}
          start={{ x: 0, y: 0 }}
          end={{ x: 1, y: 0 }}
          style={styles.header}
        >
          <Text style={styles.title}>üí§ Temps de repos</Text>
          <View style={styles.progressBarContainer}>
            <ProgressBar 
              progress={progress / 100}
              color="#FFD700"
              style={styles.progressBar}
            />
            <Text style={styles.progressText}>
              {Math.round(progress)}% compl√©t√©
            </Text>
          </View>
        </LinearGradient>

        <View style={styles.restContent}>
          <Text style={styles.restTitle}>‚ö° R√©cup√©ration active</Text>
          <Text style={styles.restSubtitle}>
            Repos : {Math.floor(getCurrentExercise()?.rest / 60)}:{(getCurrentExercise()?.rest % 60).toString().padStart(2, '0')}
          </Text>
          
          <Timer 
            duration={restTimeRemaining}
            onComplete={handleTimerComplete}
            onSkip={handleSkipRest}
          />

          <LinearGradient
            colors={['rgba(77, 158, 255, 0.15)', 'rgba(123, 97, 255, 0.15)']}
            style={styles.nextExerciseInfo}
          >
            <Text style={styles.nextExerciseLabel}>‚è≠Ô∏è Prochaine s√©rie</Text>
            <Text style={styles.nextExerciseName}>
              {currentExercise?.name}
            </Text>
            <Text style={styles.nextExerciseSubtitle}>
              S√©rie {getCurrentSetNumber()} / {currentExercise?.sets}
            </Text>
            <View style={styles.nextExerciseTargetContainer}>
              <Text style={styles.nextExerciseTargetLabel}>üéØ Objectif</Text>
              <Text style={styles.nextExerciseTarget}>
                {currentExercise?.target} {currentExercise?.type === 'time' ? 'sec' : 'reps'}
              </Text>
            </View>
          </LinearGradient>
        </View>
      </LinearGradient>
    );
  }

  return (
    <LinearGradient
      colors={['#0F172A', '#1E293B', '#0F172A']}
      style={styles.container}
    >
      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Header avec progression */}
        <LinearGradient
          colors={['#7B61FF', '#4D9EFF']}
          start={{ x: 0, y: 0 }}
          end={{ x: 1, y: 0 }}
          style={styles.header}
        >
          <Text style={styles.title}>{level.name}</Text>
          <View style={styles.progressBarContainer}>
            <ProgressBar 
              progress={progress / 100}
              color="#FFD700"
              style={styles.progressBar}
            />
            <Text style={styles.progressText}>
              {Math.round(progress)}% compl√©t√©
            </Text>
          </View>
        </LinearGradient>

        {/* Exercice actuel */}
        <LinearGradient
          colors={['rgba(30, 41, 59, 0.9)', 'rgba(15, 23, 42, 0.9)']}
          style={styles.exerciseCard}
        >
          <View style={styles.exerciseContent}>
            <View style={styles.exerciseHeader}>
              <View style={styles.exerciseTitleContainer}>
                <Text style={styles.exerciseName}>
                  üî• {currentExercise?.name}
                </Text>
                <Text style={styles.exerciseDescription}>
                  {currentExercise?.description}
                </Text>
              </View>
              <LinearGradient
                colors={['#FF6B6B', '#FF8E53']}
                style={styles.rpeChip}
              >
                <Text style={styles.rpeChipText}>
                  RPE {currentExercise?.rpe || '7/10'}
                </Text>
              </LinearGradient>
            </View>

            {/* Tips */}
            {currentExercise?.tips && (
              <LinearGradient
                colors={['#FFD700', '#FFA500']}
                style={styles.tipsCard}
              >
                <Text style={styles.tipsText}>
                  üí° {currentExercise.tips.replace('üí° ', '')}
                </Text>
              </LinearGradient>
            )}

            <View style={styles.seriesInfo}>
              <View style={styles.seriesLabelContainer}>
                <Text style={styles.seriesLabel}>
                  S√©rie {getCurrentSetNumber()}/{currentExercise?.sets}
                </Text>
              </View>
              <LinearGradient
                colors={['rgba(255, 215, 0, 0.2)', 'rgba(255, 165, 0, 0.2)']}
                style={styles.targetContainer}
              >
                <Text style={styles.targetLabel}>üéØ</Text>
                <Text style={styles.targetValue}>
                  {currentExercise?.target} {currentExercise?.type === 'time' ? 'sec' : 'reps'}
                </Text>
              </LinearGradient>
            </View>

            {/* Bouton voir description */}
            <Button
              mode="outlined"
              onPress={() => setShowDescriptionModal(true)}
              style={styles.descriptionButton}
              contentStyle={styles.descriptionButtonContent}
              textColor="#4D9EFF"
            >
              üìñ Voir la description compl√®te
            </Button>

            {/* Instructions sp√©cifiques selon le type */}
            <LinearGradient
              colors={['rgba(77, 158, 255, 0.2)', 'rgba(123, 97, 255, 0.2)']}
              style={styles.instructionContainer}
            >
              <Text style={styles.instructionText}>
                {currentExercise?.type === 'time' 
                  ? '‚è±Ô∏è Maintenez la position pendant le temps indiqu√©'
                  : 'ÔøΩ Effectuez le maximum de r√©p√©titions possible'
                }
              </Text>
            </LinearGradient>
          </View>
        </LinearGradient>

        {/* Saisie */}
        <LinearGradient
          colors={['rgba(30, 41, 59, 0.9)', 'rgba(15, 23, 42, 0.9)']}
          style={styles.inputCard}
        >
          <View style={styles.inputContent}>
            <Text style={styles.inputLabel}>
              {currentExercise?.type === 'time' 
                ? '‚è±Ô∏è Combien de secondes avez-vous tenu ?'
                : 'üíØ Combien de r√©p√©titions avez-vous r√©alis√©es ?'
              }
            </Text>
            
            <LinearGradient
              colors={['rgba(77, 158, 255, 0.1)', 'rgba(123, 97, 255, 0.1)']}
              style={styles.inputWrapper}
            >
              <TextInput
                value={inputValue}
                onChangeText={setInputValue}
                mode="outlined"
                keyboardType="numeric"
                placeholder="0"
                style={styles.input}
                contentStyle={styles.inputText}
                outlineColor="rgba(77, 158, 255, 0.3)"
                activeOutlineColor="#4D9EFF"
                textColor="#FFFFFF"
                theme={{
                  colors: {
                    primary: colors.primary,
                    background: 'transparent'
                  }
                }}
              />
            </LinearGradient>

            <LinearGradient
              colors={inputValue ? ['#4D9EFF', '#7B61FF'] : ['#64748B', '#475569']}
              style={styles.validateButton}
            >
              <Button
                mode="text"
                onPress={handleValidateSet}
                disabled={!inputValue}
                contentStyle={styles.validateButtonContent}
                labelStyle={styles.validateButtonLabel}
              >
                ‚úÖ Valider la s√©rie
              </Button>
            </LinearGradient>
          </View>
        </LinearGradient>

        {/* Info exercices restants */}
        <View style={styles.remainingInfo}>
          <Text style={styles.remainingText}>
            Exercice {currentExerciseIndex + 1}/{workoutData.exercises.length} ‚Ä¢ {workoutData.exercises.length - currentExerciseIndex - 1} restant(s)
          </Text>
        </View>

        {/* Espacement pour le bouton abandonner */}
        <View style={{ height: 80 }} />
      </ScrollView>

      {/* Modal de description */}
      <Modal
        visible={showDescriptionModal}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setShowDescriptionModal(false)}
      >
        <View style={styles.modalOverlay}>
          <LinearGradient
            colors={['#1E293B', '#0F172A']}
            style={styles.modalContainer}
          >
            {currentExercise && (
              <>
                <Text style={styles.modalTitle}>
                  üî• {currentExercise.name}
                </Text>
                <ScrollView style={styles.modalContent}>
                  <Text style={styles.modalDescription}>
                    {currentExercise.description}
                  </Text>
                  
                  {currentExercise.tips && (
                    <LinearGradient
                      colors={['#FFD700', '#FFA500']}
                      style={styles.modalTipsContainer}
                    >
                      <Text style={styles.modalTipsTitle}>üí° Conseils Pro</Text>
                      <Text style={styles.modalTips}>
                        {currentExercise.tips.replace('üí° ', '')}
                      </Text>
                    </LinearGradient>
                  )}
                  
                  <View style={styles.modalRpeContainer}>
                    <Text style={styles.modalRpeTitle}>‚ö° Intensit√© recommand√©e</Text>
                    <LinearGradient
                      colors={['#FF6B6B', '#FF8E53']}
                      style={styles.modalRpeChip}
                    >
                      <Text style={styles.modalRpeText}>
                        {currentExercise.rpe || 'RPE 7/10'}
                      </Text>
                    </LinearGradient>
                  </View>
                </ScrollView>
                <LinearGradient
                  colors={['#4D9EFF', '#7B61FF']}
                  style={styles.modalCloseButtonGradient}
                >
                  <Button 
                    mode="text"
                    onPress={() => setShowDescriptionModal(false)}
                    labelStyle={styles.modalCloseButtonLabel}
                  >
                    Fermer
                  </Button>
                </LinearGradient>
              </>
            )}
          </LinearGradient>
        </View>
      </Modal>

      {/* Bouton abandonner en bas */}
      <View style={styles.abandonButtonContainer}>
        <Button
          mode="text"
          textColor="#F44336"
          onPress={showAbandonAlert}
          style={styles.abandonButton}
        >
          ‚ö†Ô∏è Abandonner la s√©ance
        </Button>
      </View>

      {/* Modal d'abandon */}
      <Modal
        visible={showAbandonDialog}
        transparent
        animationType="fade"
        onRequestClose={cancelAbandon}
      >
        <View style={styles.abandonModalOverlay}>
          <LinearGradient
            colors={['#1E293B', '#0F172A']}
            style={styles.abandonModalContent}
          >
            <Text style={styles.abandonModalTitle}>
              ‚ö†Ô∏è Abandonner la s√©ance ?
            </Text>
            <Text style={styles.abandonModalText}>
              Tu vas perdre toute ta progression actuelle. Cette action est irr√©versible.
            </Text>
            <View style={styles.abandonModalActions}>
              <Button 
                mode="outlined" 
                onPress={cancelAbandon}
                style={styles.abandonModalButton}
                textColor="#4D9EFF"
                buttonColor="transparent"
              >
                Annuler
              </Button>
              <LinearGradient
                colors={['#F44336', '#D32F2F']}
                style={styles.abandonModalButtonGradient}
              >
                <Button 
                  mode="text"
                  onPress={confirmAbandon}
                  labelStyle={{ color: '#FFFFFF' }}
                >
                  Oui, abandonner
                </Button>
              </LinearGradient>
            </View>
          </LinearGradient>
        </View>
      </Modal>
    </LinearGradient>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#0F172A',
  },
  header: {
    padding: 20,
    borderRadius: 16,
    margin: 16,
    marginBottom: 12,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 16,
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 0, height: 2 },
    textShadowRadius: 4,
  },
  progressBarContainer: {
    gap: 8,
  },
  progressBar: {
    height: 8,
    borderRadius: 4,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
  },
  progressText: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.9)',
    textAlign: 'center',
    fontWeight: '600',
  },
  exerciseCard: {
    borderRadius: 16,
    marginHorizontal: 16,
    marginBottom: 16,
    padding: 4,
    borderWidth: 1,
    borderColor: 'rgba(77, 158, 255, 0.3)',
  },
  exerciseContent: {
    padding: 16,
  },
  exerciseHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  exerciseTitleContainer: {
    flex: 1,
    marginRight: 12,
  },
  exerciseName: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 8,
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 3,
  },
  exerciseDescription: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.7)',
    lineHeight: 20,
  },
  rpeChip: {
    borderRadius: 20,
    paddingHorizontal: 12,
    paddingVertical: 6,
  },
  rpeChipText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: 'bold',
  },
  tipsCard: {
    borderRadius: 12,
    padding: 12,
    marginVertical: 12,
  },
  tipsText: {
    fontSize: 13,
    color: '#0F172A',
    fontWeight: '600',
    lineHeight: 18,
  },
  seriesInfo: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginVertical: 12,
    gap: 12,
  },
  seriesLabelContainer: {
    flex: 1,
  },
  seriesLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  targetContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    gap: 6,
  },
  targetLabel: {
    fontSize: 16,
  },
  targetValue: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFD700',
  },
  descriptionButton: {
    marginVertical: 8,
    borderColor: '#4D9EFF',
    borderWidth: 1.5,
    borderRadius: 8,
  },
  descriptionButtonContent: {
    height: 44,
  },
  instructionContainer: {
    padding: 14,
    borderRadius: 12,
    marginTop: 12,
    borderLeftWidth: 4,
    borderLeftColor: '#4D9EFF',
  },
  instructionText: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.9)',
    fontWeight: '500',
    lineHeight: 20,
  },
  inputCard: {
    borderRadius: 16,
    marginHorizontal: 16,
    marginBottom: 16,
    padding: 4,
    borderWidth: 1,
    borderColor: 'rgba(77, 158, 255, 0.3)',
  },
  inputContent: {
    padding: 20,
    alignItems: 'center',
  },
  inputLabel: {
    fontSize: 18,
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 20,
    fontWeight: '600',
  },
  inputWrapper: {
    width: '100%',
    maxWidth: 200,
    borderRadius: 12,
    padding: 2,
    marginBottom: 20,
  },
  input: {
    width: '100%',
    backgroundColor: 'transparent',
  },
  inputText: {
    fontSize: 32,
    textAlign: 'center',
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  validateButton: {
    minWidth: 220,
    borderRadius: 12,
    overflow: 'hidden',
  },
  validateButtonContent: {
    paddingVertical: 12,
  },
  validateButtonLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  remainingInfo: {
    alignItems: 'center',
    marginVertical: 12,
  },
  remainingText: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.6)',
    fontWeight: '500',
  },
  restContent: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  restTitle: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 8,
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 0, height: 2 },
    textShadowRadius: 4,
  },
  restSubtitle: {
    fontSize: 18,
    color: 'rgba(255, 255, 255, 0.8)',
    marginBottom: 40,
    textAlign: 'center',
    fontWeight: '600',
  },
  nextExerciseInfo: {
    marginTop: 40,
    padding: 24,
    borderRadius: 16,
    alignItems: 'center',
    minWidth: 280,
    borderWidth: 1,
    borderColor: 'rgba(77, 158, 255, 0.3)',
  },
  nextExerciseLabel: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.7)',
    marginBottom: 12,
    fontWeight: '600',
  },
  nextExerciseName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 8,
    textAlign: 'center',
  },
  nextExerciseSubtitle: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.7)',
    marginBottom: 16,
  },
  nextExerciseTargetContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    backgroundColor: 'rgba(255, 215, 0, 0.1)',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
  },
  nextExerciseTargetLabel: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.7)',
  },
  nextExerciseTarget: {
    fontSize: 16,
    color: '#FFD700',
    fontWeight: 'bold',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  modalContainer: {
    borderRadius: 20,
    padding: 24,
    maxHeight: '80%',
    width: '100%',
    maxWidth: 420,
    borderWidth: 1,
    borderColor: 'rgba(77, 158, 255, 0.3)',
  },
  modalTitle: {
    color: '#FFFFFF',
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
    textAlign: 'center',
  },
  modalContent: {
    maxHeight: 400,
    marginBottom: 20,
  },
  modalDescription: {
    fontSize: 16,
    color: 'rgba(255, 255, 255, 0.9)',
    marginBottom: 16,
    lineHeight: 24,
  },
  modalTipsContainer: {
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
  },
  modalTipsTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#0F172A',
    marginBottom: 8,
  },
  modalTips: {
    fontSize: 14,
    color: '#0F172A',
    lineHeight: 20,
    fontWeight: '500',
  },
  modalRpeContainer: {
    alignItems: 'center',
    marginTop: 8,
  },
  modalRpeTitle: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.7)',
    marginBottom: 12,
    fontWeight: '600',
  },
  modalRpeChip: {
    borderRadius: 20,
    paddingHorizontal: 20,
    paddingVertical: 10,
  },
  modalRpeText: {
    color: '#FFFFFF',
    fontWeight: 'bold',
    fontSize: 14,
  },
  modalCloseButtonGradient: {
    borderRadius: 12,
    overflow: 'hidden',
  },
  modalCloseButtonLabel: {
    color: '#FFFFFF',
    fontWeight: 'bold',
    fontSize: 16,
  },
  abandonButtonContainer: {
    position: 'absolute',
    bottom: 20,
    left: 20,
    right: 20,
    alignItems: 'center',
  },
  abandonButton: {
    opacity: 0.8,
  },
  abandonModalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.85)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  abandonModalContent: {
    borderRadius: 20,
    padding: 28,
    minWidth: 320,
    maxWidth: '90%',
    borderWidth: 1,
    borderColor: 'rgba(244, 67, 54, 0.3)',
  },
  abandonModalTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 16,
  },
  abandonModalText: {
    fontSize: 16,
    color: 'rgba(255, 255, 255, 0.8)',
    textAlign: 'center',
    lineHeight: 24,
    marginBottom: 28,
  },
  abandonModalActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 12,
  },
  abandonModalButton: {
    flex: 1,
    borderColor: '#4D9EFF',
    borderWidth: 1.5,
  },
  abandonModalButtonGradient: {
    flex: 1,
    borderRadius: 8,
    overflow: 'hidden',
  },
});

export default WorkoutScreen;
