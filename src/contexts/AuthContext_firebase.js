import React, { createContext, useContext, useState, useEffect } from 'react';
import { 
  createUserWithEmailAndPassword, 
  signInWithEmailAndPassword, 
  signOut,
  onAuthStateChanged 
} from 'firebase/auth';
import { doc, setDoc, getDoc } from 'firebase/firestore';
import { auth, db } from '../services/firebase';

console.log('üî• AUTHCONTEXT: Version Firebase R√âELLE avec persistence');

const AuthContext = createContext();

// Fonction utilitaire pour cr√©er le profil utilisateur
const createUserProfile = async (user) => {
  try {
    const userRef = doc(db, 'users', user.uid);
    const userSnap = await getDoc(userRef);
    
    if (!userSnap.exists()) {
      const userData = {
        email: user.email,
        totalXP: 0,
        level: 1,
        completedPrograms: [],
        userProgress: {},
        streak: 0,
        lastWorkoutDate: null,
        createdAt: new Date(),
      };
      
      await setDoc(userRef, userData);
      console.log('‚úÖ Profil utilisateur cr√©√©');
    }
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation profil:', error);
  }
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    console.log('üîÑ AuthContext: Initialisation listener Firebase Auth');
    
    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
      console.log('üîî Firebase Auth State Changed:', firebaseUser ? `Connect√©: ${firebaseUser.email}` : 'D√©connect√©');
      
      if (firebaseUser) {
        // Utilisateur connect√© - cr√©er profil si n√©cessaire
        await createUserProfile(firebaseUser);
        setUser(firebaseUser);
      } else {
        // Utilisateur d√©connect√©
        setUser(null);
      }
      
      setLoading(false);
    });

    // Cleanup
    return () => {
      console.log('üîÑ AuthContext: Nettoyage listener');
      unsubscribe();
    };
  }, []);

  const signup = async (email, password) => {
    try {
      setLoading(true);
      console.log('üîÑ Inscription avec Firebase:', email);
      
      const result = await createUserWithEmailAndPassword(auth, email, password);
      console.log('‚úÖ Inscription r√©ussie');
      
      return { success: true, user: result.user };
    } catch (error) {
      console.error('‚ùå Erreur inscription:', error);
      
      let errorMessage = 'Erreur lors de l\'inscription';
      switch (error.code) {
        case 'auth/email-already-in-use':
          errorMessage = 'Cette adresse email est d√©j√† utilis√©e';
          break;
        case 'auth/weak-password':
          errorMessage = 'Le mot de passe doit contenir au moins 6 caract√®res';
          break;
        case 'auth/invalid-email':
          errorMessage = 'Adresse email invalide';
          break;
        default:
          errorMessage = error.message;
      }
      
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  };

  const login = async (email, password) => {
    try {
      setLoading(true);
      console.log('üîÑ Connexion avec Firebase:', email);
      
      const result = await signInWithEmailAndPassword(auth, email, password);
      console.log('‚úÖ Connexion r√©ussie');
      
      return { success: true, user: result.user };
    } catch (error) {
      console.error('‚ùå Erreur connexion:', error);
      
      let errorMessage = 'Erreur lors de la connexion';
      switch (error.code) {
        case 'auth/user-not-found':
          errorMessage = 'Aucun compte trouv√© avec cette adresse email';
          break;
        case 'auth/wrong-password':
          errorMessage = 'Mot de passe incorrect';
          break;
        case 'auth/invalid-email':
          errorMessage = 'Adresse email invalide';
          break;
        case 'auth/too-many-requests':
          errorMessage = 'Trop de tentatives. Attendez 15 minutes ou cr√©ez un nouveau compte pour tester';
          break;
        default:
          errorMessage = error.message;
      }
      
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    try {
      console.log('üîÑ D√©connexion Firebase');
      await signOut(auth);
      console.log('‚úÖ D√©connexion r√©ussie');
      return { success: true };
    } catch (error) {
      console.error('‚ùå Erreur d√©connexion:', error);
      return { success: false, error: 'Erreur lors de la d√©connexion' };
    }
  };

  const resetUserData = async () => {
    try {
      if (!user) {
        console.log('‚ùå Aucun utilisateur connect√© pour reset');
        return { success: false, error: 'Aucun utilisateur connect√©' };
      }
      
      console.log('üîÑ RESET: R√©initialisation des donn√©es utilisateur');
      
      // Reset des donn√©es dans Firestore
      const resetData = {
        totalXP: 0,
        email: user.email,
        createdAt: new Date(),
        level: 1,
        completedPrograms: [],
        userProgress: {},
        streak: 0,
        lastWorkoutDate: null
      };
      
      const userRef = doc(db, 'users', user.uid);
      await setDoc(userRef, resetData);
      console.log('‚úÖ RESET: Donn√©es utilisateur r√©initialis√©es');
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå Erreur reset:', error);
      return { success: false, error: 'Erreur lors de la r√©initialisation' };
    }
  };

  const value = {
    user,
    loading,
    signup,
    login,
    logout,
    resetUserData
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
